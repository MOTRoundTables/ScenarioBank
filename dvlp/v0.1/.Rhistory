library(shiny); runApp('small.R')
runApp('small.R')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
library(rsconnect)
shiny::runApp('C:/Users/marsz/Desktop/zvl/R/R-Shinyapp-Tutorial-master/HelloShinyApp')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/demo')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/demo')
runApp('C:/Users/marsz/Desktop/zvl/R/cranes-main')
runApp('C:/Users/marsz/Desktop/zvl/R/cranes-main')
runApp('~/GitHub/ScenarioBank/v1/scbankapp.R')
runApp('~/GitHub/ScenarioBank/v1/scbankapp.R')
runApp('~/GitHub/ScenarioBank/v1/scbankapp.R')
runApp('~/GitHub/ScenarioBank/v1')
source("main.R")
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/v1")  # for debug
source("main.R")
gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$geodir
class(cfg)
for(i in cfg)  {print(i)}
cfg$scenarios$dir
cfg$scenarios[1]$dir
cfg$scenarios
cfg$scenarios[1]
cfg$scenarios[1]$dir
cfg$scenarios[1][dir]
cfg$scenarios[1]["dir"]
cfg$scenarios[1][["dir"]]
x = cfg$scenarios[1]
x$dir
x
x$diview(x)
view(x)
view(x)\
view(x)
x[[1]]
x[[1]]$dir
x = cfg$scenarios[[1]]$dir
x
runApp()
view(cfg)
View(cfg)
View(cfg)
source("main.R")
source("main.R")
source("main.R")
View(lyrs)
view(cfg)
View(cfg)
source("main.R")
basemap$mapview
View(cfg)
View(cfg)
View(cfg$szlyrs)
View(cfg)
runApp()
cfg$scenarios[[1]]
x = cfg$scenarios[[1]]
x
x$files
x$file
x$name
x$url
x$dir
x$tazfile
scn = cfg$scenarios[[1]]
paste(scn$dir, scn$tazfile, sep="")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(cfg$szchoices)
x = copy(cfg$szchoices)
x
y[1] =1
cfg$szchoices0 = vector(mode = "list")
View(cfg$szchoices0)
cfg$szchoices0[1] = "גבולות מקור"
View(cfg$szchoices0)
cfg$szchoices0 = cfg$szchoices0 + cfg$szchoices
cfg$szchoices0[1] = "גבולות מקור"
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
cfg$szchoices0["גבולות מקור"] = 0
View(cfg$szchoices0)
cfg$szchoices0 = NULL
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0["גבולות מקור"] = 0
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0["גבולות מקור"] = as.integer(0)
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cfg$scnchoices
shiny::runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/shinywidgetsxmpl.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/shinywidgetsxmpl.R')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar2.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar3.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar3.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar3.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/sidebar3.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/shinywidgetsxmpl.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/selectizize2.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/widgets.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/widgets.R')
runApp()
runApp()
runApp()
runApp('C:/Users/marsz/Desktop/zvl/R/shiny_examples/nCoV_tracker-master')
runApp('C:/Users/marsz/Desktop/zvl/R/shiny_examples/nCoV_tracker-master')
library(mapview)
mapview()
## simple features ====================================================
library(sf)
# sf
mapview(breweries)
mapview(franconia)
# sfc
mapview(st_geometry(breweries)) # no popup
# sfg / XY - taken from ?sf::st_point
outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)
hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
pts = list(outer, hole1, hole2)
(pl1 = st_polygon(pts))
mapview(pl1)
## raster ==============================================================
if (interactive()) {
library(plainview)
mapview(plainview::poppendorf[[5]])
}
## spatial objects =====================================================
mapview(leaflet::gadmCHE)
## spatial objects =====================================================
mapview(leaflet::gadmCHE)
## styling options & legends ===========================================
mapview(franconia, color = "white", col.regions = "red")
mapview()
## spatial objects =====================================================
mapview(leaflet::gadmCHE)
mapview(breweries, zcol = "founded", at = seq(1400, 2200, 200), legend = TRUE)
runApp()
source("main.R")
basemap$mapview
currentscn
currentscn <- setScn(1)
basemap$mapview
View(currentscn)
View(currentscn)
View(currentscn$tazdata)
currentscn$opentazdata()
View(currentscn$tazdata)
basemap$mapview
mapview(TAZ_v41, zcol = "area")
mapview("TAZ_v41", zcol = "area")
mapview(TAZ_v41)
mapview(franconia) +   mapview(breweries)
mapview()
basemap$mapview
currentscn <- setScn(1)
currentscn$opentazdata()
HideSc(1)
HideCurrentSc()
basemap$mapview
lyr = currentscn$getscnlyr()
mapview(lyr)
self$mapview@map %>% showGroup(alyr)
basemap$mapview@map %>% showGroup(alyr)
basemap$mapview@map %>% showGroup(lyr)
View(basemap)
View(basemap$lyrs)
View(basemap)
View(basemap$lyrsdata)
x = basemap$lyrsdata[4]
View(x)
x = basemap$lyrsdata[[4]]
mapview(x)
mapview(x, zcol="area")
View(x)
mapview(x, zcol="AREA")
mapview(x, zcol="GE")
mapview(x, zcol="MUNC_NAME")
xmap = mapview(x, zcol="GE")
xmap
xmap %>% hideGroup(x)
mapview()
mapview(x, layer.name = "koko")
mapview()
z = mapview(x, layer.name = "koko")
z
z %>% hideGroup("koko")
xmap = mapview(x, layer.name = "xlyr")
xmap
xmap %>% hideGroup("xlyr")
xmap %>% hideGroup(x)
mapview(franconia, burst = TRUE, hide = TRUE)
## show & hide  ===========================================
xxx = mapview(franconia, color = "white", col.regions = "red")
xxx
xxx %>% hidelyr(franconia)
xxx %>% hideGroup(franconia)
xxx = xxx@map %>% hideGroup(franconia)
xxx
## show & hide  ===========================================
xxx = mapview(franconia, color = "white", col.regions = "red")
xxx
xxx@map %>% hideGroup(franconia)
xxx
## show & hide  ===========================================
xxx = mapview(franconia, color = "white", col.regions = "red", layer.name = "ff")
xxx
xxx@map %>% hideGroup("ff")
xxx
rm(xxx)
rm(z)
mapview()
xmap = mapview(x, layer.name = "xlyr")
xmap
xmap@map %>% hideGroup("xlyr")
xmap@map %>% showGroup("xlyr")
xmap = mapview(x, layer.name = "xlyr", zcol="GE")
xmap
xmap@map %>% hideGroup("xlyr")
xmap@map %>% showGroup("xlyr")
y = currentscn$opentazdata()
View(y)
y = currentscn$tazdata
View(y)
all_data <- inner_join(x, y, by = c("TAZV41" = "taz")
all_data <- inner_join(x, y, by = c("TAZV41" = "taz"))
z = currentscn$tazdataSSS
View(z)
View(y)
left_join(x, y, by = c("TAZV41" = "taz"))
mydf <- inner_join(x@data, y, by=c("TAZV41" = "taz"))
View(mydf)
x@data <- mydf
mapview(x, layer.name = "xlyr", zcol="2017_population")
View(x)
x = basemap$lyrsdata[[4]]
View(x)
View(x@data)
xmap = mapview(x, layer.name = "xlyr", zcol="GE")
xmap
x@data <- inner_join(x@data, y, by=c("TAZV41" = "taz"))
xmap = mapview(x, layer.name = "xlyr", zcol="GE")
xmap
x = basemap$lyrsdata[[4]]
View(x@data)
xmap = mapview(x, layer.name = "xlyr", zcol="GE")
xmap
x@data <- left_join(x@data, y, by=c("TAZV41" = "taz"))
xmap = mapview(x, layer.name = "xlyr", zcol="GE")
xmap
xmap = mapview(x, layer.name = "xlyr", zcol="2017_population")
xmap

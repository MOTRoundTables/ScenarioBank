dept_name=c("Finance","Marketing","Sales","IT"),
dept_branch_id= c(101,102,103,104)
)
emp_df
dept_df
dfEmp  <- data.frame(EmpId = c(1, 2, 3),
Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),
Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all = FALSE)
d1
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x = a, by.y = b, all = FALSE)
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x = {a}, by.y = {b}, all = FALSE)
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x == a, by.y == b, all = FALSE)
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x == {a}, by.y == {b}, all = FALSE)
a = "EmpId"
b = "EmployeeID"
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x = a, by.y = b, all = FALSE)
d2
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(a, b))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(a =b))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c({a} = {b}))
xx = paste(a, "=", b, sep = "")
xx
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(xx))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c({xx}))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(a = b))
dfEmp  <- data.frame(EmpId = c(1, 2, 3),
Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),
Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all = FALSE)
d1
d2 =  left_join(dfEmp, dfEmpAdr, join_by = c(EmpId = EmployeeID))
d2 =  left_join(dfEmp, dfEmpAdr, join_by = c("EmpId" = "EmployeeID"))
d1
d2 =  left_join(dfEmp, dfEmpAdr, join_by = c('EmpId' = 'EmployeeID'))
d2 =  dfEmp %>%
left_join(dfEmpAdr, join_by = c('EmpId' = 'EmployeeID'))
d2 =  dfEmp %>%
left_join(dfEmpAdr, join_by = c(EmpId = 'EmployeeID'))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}, {{b}}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}=={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c(a=b))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({a}={b}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}=={{b}}))
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
a = "EmpId"
b = "EmployeeID"
d4  = left_join(dfEmp, dfEmpAdr, by = c(a=b))
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
dfEmp  <- data.frame(EmpId = c(1, 2, 3),  Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),  Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
a = "EmpId"
b = "EmployeeID"
d4  = left_join(dfEmp, dfEmpAdr, נy=c(!!a=!!b))
d4  = left_join(dfEmp, dfEmpAdr, by=c(!!a=!!b))
d4  = left_join(dfEmp, dfEmpAdr, by=c(!!a==!!b))
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, by=names(a,b))
d4  = left_join(dfEmp, dfEmpAdr, by=names(a=b))
d4  = left_join(dfEmp, dfEmpAdr, by=names({a}={b}))
d4  = left_join(dfEmp, dfEmpAdr, by=names(rlang::enquos(a)=rlang::enquos(b)))
rlang::enquos(a)
d <- left_join(dfEmp, dfEmpAdr, by = c(a = b))
d <- merge(dfEmp, dfEmpAdr, by.x = a, by.y = b)
d
d <- merge(dfEmp, dfEmpAdr, by.x = a, by.y = b, all.x=TRUE)
d
d1
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, by = c({a}=={{b}}))
{{a}}
!!as.symbol(a)
d4  = left_join(dfEmp, dfEmpAdr, by = c("{{a}}=={{b}}"))
x = "{{a}}=={{b}}"
x = {{a}}+"=="+{{b}}
df <- merge(currentscn$geolyr, currentscn$tazdata, by.x = currentscn$scn$tazvar, by.y = "taz", all.x=TRUE)
runApp()
currentscn$scn$tazvar
{currentscn$scn$tazvar}
df <- merge(currentscn$geolyr, currentscn$tazdata, by.x = currentscn$scn$tazvar, by.y = "taz", all.x=TRUE)
View(df)
view(currentscn$geolyr)
view(currentscn$tazdata)
runApp()
joinvar = currentscn$scn$files[[1]][[4]][[1]]
runApp()
runApp()
runApp()
runApp()
fl
self$scn$dir
self$scn$file
View(currentscn)
dfEmp  <- data.frame(EmpId = c(1, 2, 3),  Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),  Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
library(tidyverse)
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
a = "EmpId"
b = "EmployeeID"
d3 = dfEmp %>% left_join(dfEmpAdr,by = setNames(a,b))
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all = FALSE)
d1
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all.x=TRUE)
d1
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
shiny::runApp()
View(currentscn)
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
dfEmp  <- data.frame(EmpId = c(1, 2, 3),  Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),  Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
a = "EmpId"
b = "EmployeeID"
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
d3
d3 = dfEmp %>% left_join(dfEmpAdr, by = setNames(a,b))
d3 = dfEmp %>% left_join(dfEmpAdr, by = setNames(b,a))
d3
setNames(b,a)
runApp()
library(leaflet)
library(mapview)
library(sf)
library(geojsonsf)
library(jsonlite)
library(tidyverse)
cfg = fromJSON("dvlp/v0.3/scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]][[j]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
library(leaflet)
library(mapview)
library(sf)
library(geojsonsf)
library(jsonlite)
library(tidyverse)
cfg = fromJSON("dvlp/v0.3/scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]][[j]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
scn <- cfg$scenarios$TA2016
# 1 open geo json
url = paste0("Scn_lib/",scn$dir,"/", scn$tazfile)
geolyr <- geojson_sf(url)
# 2 open taz data
fl = paste("Scn_lib/",scn$dir, "/", scn$file, sep="")
tazdata = read_csv(fl)
# 3 find a list of years in tazdata
years <- tazdata %>% distinct(Year) %>% pull(Year)
# 4 find a list of scenarios in tazdata
scens <- tazdata %>% distinct(Scenario)%>% pull(Scenario)
shiny::runApp()
runApp()
shiny::runApp()
setwd("~/GitHub/ScenarioBank")
runApp('dvlp/v0.3')
shiny::runApp()
#cfg = fromJSON("dvlp/v0.3/scbank.json")
cfg = fromJSON("scbank.json")
runApp()
source("main.R")
source("main.R")
source("main.R")
source("main.R")
cfg$scenariolist[[i]][[2]][[j]]
cfg$scenariolist[[i]][[2]][[j]]
cfg$scenariolist[[i]][[2]][[j]]
cfg$scenariolist[[i]][[2]][[j]]
source("main.R")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
View(cfg)
# returns a list of scenarions for a selected source
getsrcscn <- function(asrc) {    #   asrc = "מודל תל אביב"
n = length(cfg$scenarios)
cfg$scnchoices <<- vector(mode = "list")  # view(cfg$scnchoices)
for (i in 1:n) {
ky = cfg$scnkeys[i]
if (cfg$scenarios[[ky]]$source==asrc) {
cfg$scnchoices[as.character(cfg$scnlist[i])] <<- i
}
}
#return()
}
runApp()
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/dvlp/v0.3")  # for debug
source("main.R")
source("maplib.R")
source("main.R")
cfg$scnkeys
View(cfg)
View(cfg)
runApp()
xxx = fromJSON(paste(cfg$general$geodir, "szlyrs.json"))
runApp()
runApp()
runApp()
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/dvlp/v0.3")  # for debug
source("main.R")
View(cfg)
source("main.R")
View(tmp)
View(cfg)
runApp()
View(cfg)
source("main.R")
View(cfg)
sc = "BS_v09"
scnum = which(cfg$scnkeys==sc)
runApp()
runApp()
currentscnnum
runApp()
currentscnnum
cfg$scnchoices
View(cfg)
cfg$scenariolist
x = "מודל תל אביב"
cfg$scenariolist$x
cfg$scenariolist$[[x]]
cfg$scenariolist$[x]
class(cfg$scenariolist)
mode(cfg$scenariolist)
runApp()
currentscnnum
runApp()
source("main.R")
source("main.R")
View(cfg)
runApp()
cfg$scnchoices
input$selectScn
runApp()
input$selectScn
is.null(input$selectScn)
runApp()
input$selectScn
runApp()
currentsrc
runApp()
currentscnky
input$selectScn
runApp()
input$selectScn
currentscnky
runApp()
currentscnky
scnnum
scn1
runApp()
View(scn1)
force(scn)
View(scn)
View(scn)
View(scn)
scn$tazname
scn$tazlyr
View(temp)
runApp()
runApp()
runApp()
runApp()
runApp()
View(cfg)
source("main.R")
sc = "BS_v09"
currentscn <<- setScn(sc) # set scenario, session
currentscn$opentazdata()
View(currentscn)
sc = "BS_v09"
ascn <<- setScn(sc) # set scenario, session
basemap$mapview
View(ascn)
View(ascn)
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/dvlp/v0.3")  # for debug
source("main.R")
sc = "BS_v09"
# create scenario
ascn <<- setScn(sc)
basemap$mapview
ascn$opentazdata()
# 1 generate a summary of population by scenario
popsummary = ascn$tazdata %>%
group_by(Scenario) %>%
summarise(population = sum(population))
# 1 generate a summary of population by scenario
years <- ascn$tazdata %>% distinct(Year) %>% pull(Year)
scens <- ascn$tazdata %>% distinct(Scenario)%>% pull(Scenario)
popsummary = ascn$tazdata %>%
group_by(Scenario) %>%
summarise(population = sum(population))
view(ascn$tazdata)
popsummary = ascn$tazdata %>%
group_by(Scenario) %>%
summarise(population = sum(population))
runApp()
shiny::runApp()
runApp()
source("main.R")
source("main.R")
source("main.R")
source("main.R")
View(cfg)
View(cfg)
source("main.R")
cfg$general$Frcstdir
cfg$general$sysdir
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/dvlp/v0.3")  # for debug
source("main.R")
for (j in 1:n2) {
cat(cfg$forecastslist[[i]][[2]][[j]])
cfg$Frcstkeys = append(cfg$Frcstkeys, cfg$forecastslist[[i]][[2]][[j]])
x = fromJSON(paste(cfg$general$Frcstdir, cfg$forecastslist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$forecastslist[[i]][[2]][[j]]]] = x
cfg$forecasts = append(cfg$forecasts, y)
}
cfg$general$Frcstdir
cfg$forecastslist[[i]][[2]][[j]]
shiny::runApp()
runApp()
View(currentscn)
currentscn$scn$scenarios
map(currentscn$scn$scenarios, 1)
map(currentscn$scn$scenarios, 2)
runApp()
View(cfg)
source("main.R")
View(cfg)
x = cfg$forecasts$BS_v09$scenarios
x
map(x, 1)
x = cfg$forecasts$BS_v09$scenarios
x
y = map(x, 1)
y
y[1]
y = lapply(x, `[[`, 1)
y
y = names(x)
y
runApp()
runApp()
source("main.R")
sc = "BS_v09"
# create scenario
aFrcst <<- setFrcst(sc)
View(aFrcst)
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/multiinput.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/selectizize.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/selectizize2.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/widgets.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/virtualselectinput.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/virtualselectinput.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/selectinput.R')
runApp()
runApp()
runApp()
View(currentFrcst)
currentFrcst$Frcst$scenarios
runApp()
input$selectScn
input$selectScn
currentFrcst$Frcst$scenarios$base
currentFrcst$Frcst$scenarios$base$years
currentFrcst$Frcst$scenarios$[[input$selectScn]]
x = currentFrcst$Frcst$scenarios
x
input$selectScn
x[[input$selectScn]]
currentFrcst$Frcst$scenarios[[input$selectScn]]
currentFrcst$Frcst$scenarios[[input$selectScn]]$years
runApp()
source("main.R")
xx = currentFrcst$Frcst$scenarios
xx
xx[[IPLAN]]
xx[["IPLAN"]]
source("main.R")
source("main.R")
x$scnlist
length(x$scnlist)
y
y$desc
x$scnnames
x$scnnames[1]
source("main.R")
runApp()
View(currentFrcst)
source("main.R")
sc = "BS_v09"
# create scenario
aFrcst <<- setFrcst(sc)
basemap$mapview
aFrcst$opentazdata()
view(aFrcst$tazdata)
# 1 generate a summary of population by scenario
years <- aFrcst$tazdata %>% distinct(Year) %>% pull(Year)
scens <- aFrcst$tazdata %>% distinct(Scenario)%>% pull(Scenario)
View(aFrcst)
scens = aFrcst$frcst$snlist
scens
scens = aFrcst$Frcst$scnlist
scens
afrcst = 1
years = currentFrcst$Frcst$scenarios[[scens[afrcst]]]$years
years
years = aFrcst$Frcst$scenarios[[scens[afrcst]]]$years
years
aFrcst$Frcst$scnnames
shiny::runApp()
runApp()

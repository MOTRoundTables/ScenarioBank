cfg$superzones = tmp$superzones
cfg$szkeys = names(cfg$superzones)                  # vector of SZ keys
n = length(cfg$szkeys)
cfg$szlist = vector(mode = "list", length = n)      # for menu
cfg$szchoices = vector(mode = "list")               # for menu
cfg$szlyrs = vector(mode = "list", length = n)      # for menu
for (i in 1:n) {
ky = cfg$szkeys[i]
cfg$superzones[[ky]]$name = cfg$superzones[[ky]]$ename # alyr$hname  # set Eng or Heb
cfg$superzones[[ky]]$url = gsub("<geodir>", cfg$general$geodir, cfg$superzones[[ky]]$url, fixed=TRUE)
cfg$szlist[i] = cfg$superzones[[ky]]$lyr  #name
cfg$sznames[i] = cfg$superzones[[ky]]$hname  # set Heb for menu
cfg$szchoices[as.character(cfg$sznames[i])] = i
cfg$szlyrs[i] = cfg$superzones[ky]
}
cfg$szlyrs = cfg$szlyrs %>%
map_df(as_tibble)
#cfg$szlyrs['name'] <- ""
cfg$szlyrs['status'] <- 0                        # lyrs %>% add_column(status = 0)  # NA
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0[cfg$messages$orgzns] = as.integer(0)
# cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
list("Choice 1" = 1, "Choice 2" = 2)
return(cfg)
}
cfg <- initapp()
source(paste0(idoenv,"maplib.R"))
source(paste0(idoenv,"scnlib.R"))
source(paste0(idoenv,"utillib.R"))
source(paste0(idoenv,"proc-tbl.R"))
source(paste0(idoenv,"proc-chrt.R"))
source(paste0(idoenv,"proc-map.R"))
# - initialize
initapp <- function() {
cfg = fromJSON(paste0(idoenv,"scbank.json"))
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$frcstdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$frcstdir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# -- load forecasts dictionaries and create a list of frcst objects
n = length(cfg$forecastslist)
cfg$frcstsources = list()
cfg$forecasts = list()
cfg$frcstkeys = vector()
k = 0
for (i in 1:n) {
cfg$frcstsources = append(cfg$frcstsources, cfg$forecastslist[[i]][[1]])
n2 = length(cfg$forecastslist[[i]][[2]])
for (j in 1:n2) {
k = k + 1
frcstky = cfg$forecastslist[[i]][[2]][[j]]
cat(frcstky)
frcst1 = frcstclass$new(k, frcstky) # create object
cfg$forecasts = append(cfg$forecasts, frcst1)   # list of objects
#cfg$forecasts[frcstky] = frcst1   # list of objects
cfg$frcstkeys = append(cfg$frcstkeys, frcstky)
}
}
# -- build frcstchoices for menu
n = length(cfg$frcstkeys)
cfg$frcstlist = vector(mode = "list", length = n)
cfg$frcstchoices = vector(mode = "list")              # for menu
for (i in 1:n) {
ky = cfg$frcstkeys[i]
cfg$frcstlist[i] = cfg$forecasts[[ky]]$name           # Frcst names
cfg$allfrcstchoices[as.character(cfg$frcstlist[i])] = ky # Frcst ky
}
# -- load & process super-zones dict
tmp = fromJSON(paste(cfg$general$geodir, "szlyrs.json", sep=""))
cfg$superzones = tmp$superzones
cfg$szkeys = names(cfg$superzones)                  # vector of SZ keys
n = length(cfg$szkeys)
cfg$szlist = vector(mode = "list", length = n)      # for menu
cfg$szchoices = vector(mode = "list")               # for menu
cfg$szlyrs = vector(mode = "list", length = n)      # for menu
for (i in 1:n) {
ky = cfg$szkeys[i]
cfg$superzones[[ky]]$name = cfg$superzones[[ky]]$ename # alyr$hname  # set Eng or Heb
cfg$superzones[[ky]]$url = gsub("<geodir>", cfg$general$geodir, cfg$superzones[[ky]]$url, fixed=TRUE)
cfg$szlist[i] = cfg$superzones[[ky]]$lyr  #name
cfg$sznames[i] = cfg$superzones[[ky]]$hname  # set Heb for menu
cfg$szchoices[as.character(cfg$sznames[i])] = i
cfg$szlyrs[i] = cfg$superzones[ky]
}
cfg$szlyrs = cfg$szlyrs %>%
map_df(as_tibble)
#cfg$szlyrs['name'] <- ""
cfg$szlyrs['status'] <- 0                        # lyrs %>% add_column(status = 0)  # NA
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0[cfg$messages$orgzns] = as.integer(0)
# cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
list("Choice 1" = 1, "Choice 2" = 2)
return(cfg)
}
cfg <- initapp()
source(paste0(idoenv,"maplib.R"))
source(paste0(idoenv,"scnlib.R"))
source(paste0(idoenv,"utillib.R"))
source(paste0(idoenv,"proc-tbl.R"))
source(paste0(idoenv,"proc-chrt.R"))
source(paste0(idoenv,"proc-map.R"))
cfg <- initapp()
# - initialize
initapp <- function() {
browser()
cfg = fromJSON(paste0(idoenv,"scbank.json"))
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$frcstdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$frcstdir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# -- load forecasts dictionaries and create a list of frcst objects
n = length(cfg$forecastslist)
cfg$frcstsources = list()
cfg$forecasts = list()
cfg$frcstkeys = vector()
k = 0
for (i in 1:n) {
cfg$frcstsources = append(cfg$frcstsources, cfg$forecastslist[[i]][[1]])
n2 = length(cfg$forecastslist[[i]][[2]])
for (j in 1:n2) {
k = k + 1
frcstky = cfg$forecastslist[[i]][[2]][[j]]
cat(frcstky)
frcst1 = frcstclass$new(k, frcstky) # create object
cfg$forecasts = append(cfg$forecasts, frcst1)   # list of objects
#cfg$forecasts[frcstky] = frcst1   # list of objects
cfg$frcstkeys = append(cfg$frcstkeys, frcstky)
}
}
# -- build frcstchoices for menu
n = length(cfg$frcstkeys)
cfg$frcstlist = vector(mode = "list", length = n)
cfg$frcstchoices = vector(mode = "list")              # for menu
for (i in 1:n) {
ky = cfg$frcstkeys[i]
cfg$frcstlist[i] = cfg$forecasts[[ky]]$name           # Frcst names
cfg$allfrcstchoices[as.character(cfg$frcstlist[i])] = ky # Frcst ky
}
# -- load & process super-zones dict
tmp = fromJSON(paste(cfg$general$geodir, "szlyrs.json", sep=""))
cfg$superzones = tmp$superzones
cfg$szkeys = names(cfg$superzones)                  # vector of SZ keys
n = length(cfg$szkeys)
cfg$szlist = vector(mode = "list", length = n)      # for menu
cfg$szchoices = vector(mode = "list")               # for menu
cfg$szlyrs = vector(mode = "list", length = n)      # for menu
for (i in 1:n) {
ky = cfg$szkeys[i]
cfg$superzones[[ky]]$name = cfg$superzones[[ky]]$ename # alyr$hname  # set Eng or Heb
cfg$superzones[[ky]]$url = gsub("<geodir>", cfg$general$geodir, cfg$superzones[[ky]]$url, fixed=TRUE)
cfg$szlist[i] = cfg$superzones[[ky]]$lyr  #name
cfg$sznames[i] = cfg$superzones[[ky]]$hname  # set Heb for menu
cfg$szchoices[as.character(cfg$sznames[i])] = i
cfg$szlyrs[i] = cfg$superzones[ky]
}
cfg$szlyrs = cfg$szlyrs %>%
map_df(as_tibble)
#cfg$szlyrs['name'] <- ""
cfg$szlyrs['status'] <- 0                        # lyrs %>% add_column(status = 0)  # NA
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0[cfg$messages$orgzns] = as.integer(0)
# cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
list("Choice 1" = 1, "Choice 2" = 2)
return(cfg)
}
cfg <- initapp()
#idoenv = "dvlp/v0.3/"
idoenv = ""
source(paste0(idoenv,"maplib.R"))
source(paste0(idoenv,"scnlib.R"))
source(paste0(idoenv,"utillib.R"))
source(paste0(idoenv,"proc-tbl.R"))
source(paste0(idoenv,"proc-chrt.R"))
source(paste0(idoenv,"proc-map.R"))
# - initialize
initapp <- function() {
browser()
cfg = fromJSON(paste0(idoenv,"scbank.json"))
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$frcstdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$frcstdir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# -- load forecasts dictionaries and create a list of frcst objects
n = length(cfg$forecastslist)
cfg$frcstsources = list()
cfg$forecasts = list()
cfg$frcstkeys = vector()
k = 0
for (i in 1:n) {
cfg$frcstsources = append(cfg$frcstsources, cfg$forecastslist[[i]][[1]])
n2 = length(cfg$forecastslist[[i]][[2]])
for (j in 1:n2) {
k = k + 1
frcstky = cfg$forecastslist[[i]][[2]][[j]]
cat(frcstky)
frcst1 = frcstclass$new(k, frcstky) # create object
cfg$forecasts = append(cfg$forecasts, frcst1)   # list of objects
#cfg$forecasts[frcstky] = frcst1   # list of objects
cfg$frcstkeys = append(cfg$frcstkeys, frcstky)
}
}
# -- build frcstchoices for menu
n = length(cfg$frcstkeys)
cfg$frcstlist = vector(mode = "list", length = n)
cfg$frcstchoices = vector(mode = "list")              # for menu
for (i in 1:n) {
ky = cfg$frcstkeys[i]
cfg$frcstlist[i] = cfg$forecasts[[ky]]$name           # Frcst names
cfg$allfrcstchoices[as.character(cfg$frcstlist[i])] = ky # Frcst ky
}
# -- load & process super-zones dict
tmp = fromJSON(paste(cfg$general$geodir, "szlyrs.json", sep=""))
cfg$superzones = tmp$superzones
cfg$szkeys = names(cfg$superzones)                  # vector of SZ keys
n = length(cfg$szkeys)
cfg$szlist = vector(mode = "list", length = n)      # for menu
cfg$szchoices = vector(mode = "list")               # for menu
cfg$szlyrs = vector(mode = "list", length = n)      # for menu
for (i in 1:n) {
ky = cfg$szkeys[i]
cfg$superzones[[ky]]$name = cfg$superzones[[ky]]$ename # alyr$hname  # set Eng or Heb
cfg$superzones[[ky]]$url = gsub("<geodir>", cfg$general$geodir, cfg$superzones[[ky]]$url, fixed=TRUE)
cfg$szlist[i] = cfg$superzones[[ky]]$lyr  #name
cfg$sznames[i] = cfg$superzones[[ky]]$hname  # set Heb for menu
cfg$szchoices[as.character(cfg$sznames[i])] = i
cfg$szlyrs[i] = cfg$superzones[ky]
}
cfg$szlyrs = cfg$szlyrs %>%
map_df(as_tibble)
#cfg$szlyrs['name'] <- ""
cfg$szlyrs['status'] <- 0                        # lyrs %>% add_column(status = 0)  # NA
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0[cfg$messages$orgzns] = as.integer(0)
# cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
list("Choice 1" = 1, "Choice 2" = 2)
return(cfg)
}
cfg <- initapp()
#idoenv = "dvlp/v0.3/"
idoenv = ""
source(paste0(idoenv,"maplib.R"))
source(paste0(idoenv,"scnlib.R"))
source(paste0(idoenv,"utillib.R"))
source(paste0(idoenv,"proc-tbl.R"))
source(paste0(idoenv,"proc-chrt.R"))
source(paste0(idoenv,"proc-map.R"))
# - initialize
initapp <- function() {
browser()
cfg = fromJSON(paste0(idoenv,"scbank.json"))
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$frcstdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$frcstdir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# -- load forecasts dictionaries and create a list of frcst objects
n = length(cfg$forecastslist)
cfg$frcstsources = list()
cfg$forecasts = list()
cfg$frcstkeys = vector()
k = 0
for (i in 1:n) {
cfg$frcstsources = append(cfg$frcstsources, cfg$forecastslist[[i]][[1]])
n2 = length(cfg$forecastslist[[i]][[2]])
for (j in 1:n2) {
k = k + 1
frcstky = cfg$forecastslist[[i]][[2]][[j]]
cat(frcstky)
frcst1 = frcstclass$new(k, frcstky, cfg$general$frcstdir) # create object
cfg$forecasts = append(cfg$forecasts, frcst1)   # list of objects
#cfg$forecasts[frcstky] = frcst1   # list of objects
cfg$frcstkeys = append(cfg$frcstkeys, frcstky)
}
}
# -- build frcstchoices for menu
n = length(cfg$frcstkeys)
cfg$frcstlist = vector(mode = "list", length = n)
cfg$frcstchoices = vector(mode = "list")              # for menu
for (i in 1:n) {
ky = cfg$frcstkeys[i]
cfg$frcstlist[i] = cfg$forecasts[[ky]]$name           # Frcst names
cfg$allfrcstchoices[as.character(cfg$frcstlist[i])] = ky # Frcst ky
}
# -- load & process super-zones dict
tmp = fromJSON(paste(cfg$general$geodir, "szlyrs.json", sep=""))
cfg$superzones = tmp$superzones
cfg$szkeys = names(cfg$superzones)                  # vector of SZ keys
n = length(cfg$szkeys)
cfg$szlist = vector(mode = "list", length = n)      # for menu
cfg$szchoices = vector(mode = "list")               # for menu
cfg$szlyrs = vector(mode = "list", length = n)      # for menu
for (i in 1:n) {
ky = cfg$szkeys[i]
cfg$superzones[[ky]]$name = cfg$superzones[[ky]]$ename # alyr$hname  # set Eng or Heb
cfg$superzones[[ky]]$url = gsub("<geodir>", cfg$general$geodir, cfg$superzones[[ky]]$url, fixed=TRUE)
cfg$szlist[i] = cfg$superzones[[ky]]$lyr  #name
cfg$sznames[i] = cfg$superzones[[ky]]$hname  # set Heb for menu
cfg$szchoices[as.character(cfg$sznames[i])] = i
cfg$szlyrs[i] = cfg$superzones[ky]
}
cfg$szlyrs = cfg$szlyrs %>%
map_df(as_tibble)
#cfg$szlyrs['name'] <- ""
cfg$szlyrs['status'] <- 0                        # lyrs %>% add_column(status = 0)  # NA
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0[cfg$messages$orgzns] = as.integer(0)
# cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
list("Choice 1" = 1, "Choice 2" = 2)
return(cfg)
}
cfg <- initapp()
View(cfg)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
View(cfg)
runApp()
View(cfg)
runApp()
runApp()
runApp()
View(cfg)
cfg$frcstnums
runApp()
cfg$frcstnums
cfg$frcstnums[ky]
cfg$frcstnums[[ky]]
runApp()
runApp()
View(cfg)
runApp()
View(cfg)
asrc = "מודל תל אביב"
i = which(cfg$frcstsources == asrc)
frcsts = cfg$forecastslist[[i]][[2]]
n = length(frcsts)
cfg$frcstchoices <<- vector(mode = "list")
cfg
cfg$frcstchoices <<- vector(mode = "list")
View(cfg)
runApp()
cfg$frcstchoices
runApp()
runApp()
View(currentfrcst)
runApp()
self$geolyr
self$Frcst$dir
shiny::runApp()
runApp()
self$dir
self$data$tazfile
runApp()
runApp()
shiny::runApp()
aFrcst = currentfrcst
aScn = currentscn
aYr=2030
aVar = 'population'
aVar =  aFrcst$data$dict[[aVar0]]
aFrcst = currentfrcst
aScn = currentscn
aYr=2030
aVar = 'population'
dataVar =  aFrcst$data$dict[[aVar]]
view(currentfrcst$tazdata)
cat(aFrcst$name, aScn, aYr, dataVar)
x_join <- aFrcst$data$dict$taz
y_join <- aFrcst$data$tazvar
view(currentfrcst$geolyr)
filtered <- aFrcst$tazdata %>% as_tibble() %>% filter(Scenario == aScn, Year == aYr)
View(filtered)
with_geoms <- filtered %>% left_join(aFrcst$geolyr, by = setNames(y_join,x_join)) %>% st_sf()
View(with_geoms)
mapview(with_geoms,zcol = dataVar)
basemap$mapview
runApp()
runApp()
runApp()
runApp()
runApp()
basemap$mapview
basemap$createmap(cfg$basemap)
basemap$mapview
#basemap$addlayers(cfg$szlyrs)
basemap$resetmapview(cfg$basemap)
basemap$mapview
basemap$resetmap(cfg$basemap)
runApp()
runApp()
View(currentfrcst)
currentfrcst$data$tazvar
currentfrcst$geolyr
view(currentfrcst$geolyr)
view(currentfrcst$tazdata)
runApp()
view(currentfrcst$tazdata)
runApp()
runApp()
View(filtered)
view(currentfrcst$tazdata)
createSimpleMap(currentfrcst, aScn = currentscn,
aYr=2017, aVar = 'population')
runApp()
view(currentfrcst$tazdata)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(currentfrcst)
runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
shiny::runApp()
runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
shiny::runApp()
currentfrcst$data$tazvar
shiny::runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
view(currentfrcst$geolyr)
# for debug
aFrcst = currentfrcst
aScn = currentscn
aYr = 2017
aVar = 'population'
createSimpleMap(aFrcst, aScn = currentscn,
aYr=aYr, aVar = aVar)
source(paste0(idoenv,"proc-map.R"))
createSimpleMap(aFrcst, aScn = currentscn,
aYr=aYr, aVar = aVar)
#if(is.na(aScn)){
#  aScn = aFrcst$Frcst$scnlist[1]
#}
#if(is.na(aYr)){
#  aYr = aFrcst$Frcst$scenarios[[aScn]]$years[1]
#}
#if(is.na(aVar)){
#  aVar =  aFrcst$data$dict$population
#}
browser()
cat(aFrcst$name, aScn, aYr, dataVar)
View(filtered)
shiny::runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
runApp()
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
# for debug
aFrcst = currentfrcst
aScn = currentscn
aYr = 2007
aVar = 'population'
createSimpleMap(aFrcst, aScn = currentscn,
aYr=aYr, aVar = aVar)
view(currentfrcst$tazdata)
runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
# for debug
aFrcst = currentfrcst
aScn = currentscn
aYr = 2007
aYr = 2020
aVar = 'population'
aYr = 2020
aVar = 'population'
createSimpleMap(aFrcst, aScn = currentscn,
aYr=aYr, aVar = aVar)
view(currentfrcst$tazdata)
basemap$mapview
shiny::runApp()
currentfrcst$data$tazvar
view(currentfrcst$geolyr)
currentfrcst$data$dict$taz
view(currentfrcst$tazdata)
# for debug
aFrcst = currentfrcst
aScn = currentscn
view(currentfrcst$tazdata)
# for debug
aFrcst = currentfrcst
aScn = currentscn
aYr = 2020
aVar = 'population'
createSimpleMap(aFrcst, aScn = currentscn,
aYr=aYr, aVar = aVar)
currentfrcst$data$dict$taz
runApp()

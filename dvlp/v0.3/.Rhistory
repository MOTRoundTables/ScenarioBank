library(shiny); runApp('small.R')
runApp('small.R')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
library(rsconnect)
shiny::runApp('C:/Users/marsz/Desktop/zvl/R/R-Shinyapp-Tutorial-master/HelloShinyApp')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/demo')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/test1/demo')
runApp('C:/Users/marsz/Desktop/zvl/R/cranes-main')
runApp('C:/Users/marsz/Desktop/zvl/R/cranes-main')
runApp('~/GitHub/ScenarioBank/v1/scbankapp.R')
runApp('~/GitHub/ScenarioBank/v1/scbankapp.R')
runApp('~/GitHub/ScenarioBank/v1/scbankapp.R')
runApp('~/GitHub/ScenarioBank/v1')
source("main.R")
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/v1")  # for debug
source("main.R")
gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$geodir
class(cfg)
for(i in cfg)  {print(i)}
cfg$scenarios$dir
cfg$scenarios[1]$dir
cfg$scenarios
cfg$scenarios[1]
cfg$scenarios[1]$dir
cfg$scenarios[1][dir]
cfg$scenarios[1]["dir"]
cfg$scenarios[1][["dir"]]
x = cfg$scenarios[1]
x$dir
x
x$diview(x)
view(x)
view(x)\
view(x)
x[[1]]
x[[1]]$dir
x = cfg$scenarios[[1]]$dir
x
runApp()
view(cfg)
View(cfg)
View(cfg)
source("main.R")
source("main.R")
source("main.R")
View(lyrs)
view(cfg)
View(cfg)
source("main.R")
basemap$mapview
View(cfg)
View(cfg)
View(cfg$szlyrs)
View(cfg)
runApp()
cfg$scenarios[[1]]
x = cfg$scenarios[[1]]
x
x$files
x$file
x$name
x$url
x$dir
x$tazfile
scn = cfg$scenarios[[1]]
paste(scn$dir, scn$tazfile, sep="")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(cfg$szchoices)
x = copy(cfg$szchoices)
x
y[1] =1
cfg$szchoices0 = vector(mode = "list")
View(cfg$szchoices0)
cfg$szchoices0[1] = "גבולות מקור"
View(cfg$szchoices0)
cfg$szchoices0 = cfg$szchoices0 + cfg$szchoices
cfg$szchoices0[1] = "גבולות מקור"
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
cfg$szchoices0["גבולות מקור"] = 0
View(cfg$szchoices0)
cfg$szchoices0 = NULL
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0["גבולות מקור"] = 0
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0["גבולות מקור"] = as.integer(0)
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cfg$scnchoices
shiny::runApp()
View(cfg)
shiny::runApp()
View(cfg)
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
#browser()
n = length(cfg$scenariolist)
x = vector()
x[1] = 1
x[2] = 2
x[5] = 4
runApp()
View(cfg)
x[1] = 1
x = c()
x[1] = 1
x = append(x, 2)
x
runApp()
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
View(cfg)
snkeys
cfg$snkeys
cfg$scnkeys
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
browser()
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
cfg$scenariolist[[i]][[2]]
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
browser()
for (j in 1:n2) {
cfg$scnkeys = c(cfg$scnkeys, cfg$scenariolist[[i]][[2]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
runApp()
shiny::runApp()
View(cfg)
shiny::runApp()
shiny::runApp()
cfg$scnchoices
asrc
cfg$scnkeys[i]
cfg$scenarios[[ky]]
cfg$scenarios[[ky]]$source
View(cfg)
View(cfg)
View(cfg)
runApp()
asrc
cfg$scenarios[[ky]]$source
cfg$scenarios[[ky]]$source==asrc
asrc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
currentsrc
currentsrc
runApp()
currentscn
currentscn
runApp()
runApp()
runApp()
currentsrc
runApp()
currentsrc
input$selectSrc
View(cfg)
runApp()
cfg$scnchoices
cfg$scnchoices[1]
cfg$scnchoices[1][1]
cfg$scnchoices[1][2]
cfg$scnchoices[[1]][[2]]
cfg$scnchoices[[1]][[1]]
cfg$scnchoices[[1]][[0]]
cfg$scnchoices[[1]][[1]]
cfg$scnchoices[[2]][[1]]
View(cfg)
runApp()
input$selectSrc
input$selectScn
cfg$scnchoices
currentscn
runApp()
currentscnnum
input$selectScn
currentscnnum
runApp()
input$selectScn
input$selectScn
input$selectScn
input$selectScn
runApp()
input$selectScn
runApp()
input$selectScn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
currentscnnum
input$selectScn
View(cfg)
scnnum
View(scn1)
force(lyrs)
View(lyrs)
View(basemap)
View(lyrs)
force(alyr)
alyr$url
debugSource("~/GitHub/ScenarioBank/dvlp/v0.3/maplib.R")
runApp()
runApp()

x[[1]]
x[[1]]$dir
x = cfg$scenarios[[1]]$dir
x
runApp()
view(cfg)
View(cfg)
View(cfg)
source("main.R")
source("main.R")
source("main.R")
View(lyrs)
view(cfg)
View(cfg)
source("main.R")
basemap$mapview
View(cfg)
View(cfg)
View(cfg$szlyrs)
View(cfg)
runApp()
cfg$scenarios[[1]]
x = cfg$scenarios[[1]]
x
x$files
x$file
x$name
x$url
x$dir
x$tazfile
scn = cfg$scenarios[[1]]
paste(scn$dir, scn$tazfile, sep="")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(cfg$szchoices)
x = copy(cfg$szchoices)
x
y[1] =1
cfg$szchoices0 = vector(mode = "list")
View(cfg$szchoices0)
cfg$szchoices0[1] = "גבולות מקור"
View(cfg$szchoices0)
cfg$szchoices0 = cfg$szchoices0 + cfg$szchoices
cfg$szchoices0[1] = "גבולות מקור"
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
cfg$szchoices0["גבולות מקור"] = 0
View(cfg$szchoices0)
cfg$szchoices0 = NULL
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0["גבולות מקור"] = 0
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
cfg$szchoices0 = vector(mode = "list")
cfg$szchoices0["גבולות מקור"] = as.integer(0)
cfg$szchoices0 = append (cfg$szchoices0, cfg$szchoices)
View(cfg$szchoices0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cfg$scnchoices
shiny::runApp()
View(cfg)
shiny::runApp()
View(cfg)
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
#browser()
n = length(cfg$scenariolist)
x = vector()
x[1] = 1
x[2] = 2
x[5] = 4
runApp()
View(cfg)
x[1] = 1
x = c()
x[1] = 1
x = append(x, 2)
x
runApp()
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
View(cfg)
snkeys
cfg$snkeys
cfg$scnkeys
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
browser()
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
cfg$scenariolist[[i]][[2]]
cfg = fromJSON("scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
browser()
for (j in 1:n2) {
cfg$scnkeys = c(cfg$scnkeys, cfg$scenariolist[[i]][[2]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
runApp()
shiny::runApp()
View(cfg)
shiny::runApp()
shiny::runApp()
cfg$scnchoices
asrc
cfg$scnkeys[i]
cfg$scenarios[[ky]]
cfg$scenarios[[ky]]$source
View(cfg)
View(cfg)
View(cfg)
runApp()
asrc
cfg$scenarios[[ky]]$source
cfg$scenarios[[ky]]$source==asrc
asrc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
currentsrc
currentsrc
runApp()
currentscn
currentscn
runApp()
runApp()
runApp()
currentsrc
runApp()
currentsrc
input$selectSrc
View(cfg)
runApp()
cfg$scnchoices
cfg$scnchoices[1]
cfg$scnchoices[1][1]
cfg$scnchoices[1][2]
cfg$scnchoices[[1]][[2]]
cfg$scnchoices[[1]][[1]]
cfg$scnchoices[[1]][[0]]
cfg$scnchoices[[1]][[1]]
cfg$scnchoices[[2]][[1]]
View(cfg)
runApp()
input$selectSrc
input$selectScn
cfg$scnchoices
currentscn
runApp()
currentscnnum
input$selectScn
currentscnnum
runApp()
input$selectScn
input$selectScn
input$selectScn
input$selectScn
runApp()
input$selectScn
runApp()
input$selectScn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
currentscnnum
input$selectScn
View(cfg)
scnnum
View(scn1)
force(lyrs)
View(lyrs)
View(basemap)
View(lyrs)
force(alyr)
alyr$url
debugSource("~/GitHub/ScenarioBank/dvlp/v0.3/maplib.R")
runApp()
runApp()
x = c("X", "A", "V", "DD")
x
x = x[ !x == 'A']
x
basemap
basemap$map
source("main.R")
source("maplib.R")
source("scnlib.R")
basemap$map
shiny::runApp()
x =1
x
basemap$mapview@map
View(cfg)
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
basemap$mapview
currentscn$tazdata %>%
summary()
currentscn$tazdata
df1
df1 = currentscn$tazdata[[1]]
view(df1)
colnames(df1)
df2 = df1 %>%
left_join(currentscn$tazdata[[2]], by='taz')
glimpse(basemap$lyrsdata[[1]])
basemap$displaymap()
basemap$lyrs
lyr = currentscn$getscnlyr()
lyr
basemap$mapview(lyr, zcol = c("ISPALE"))
basemap$mapview
basemap$mapview@map(lyr, zcol = c("ISPALE"))
basemap$mapview
basemap$mapview@map
basemap$displaymap()
basemap$mapview(lyr, zcol = c("ISPALE"))
basemap$mapview(breweries, zcol = "founded")
View(basemap)
lyr
basemap$mapview %>%
mapview(lyr, zcol = c("ISPALE"))
basemap$mapview(lyr, zcol = "ISPALE")
basemap$mapview(lyr, zcol = "ID")
basemap$mapview@map(lyr, zcol = "ISPALE")
basemap$mapview(layer.name =lyr, zcol = "ISPALE")
basemap$mapview(layer.name =lyr, zcol = "ISPALE")
basemap$mapview
lyr %>%
basemap$mapview(zcol = "ISPALE")
source("main.R")
source("maplib.R")
source("scnlib.R")
source("main.R")
source("maplib.R")
source("scnlib.R")
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
basemap$mapview
basemap$mapview <- basemap$mapview(layer.name =lyr, zcol = "ISPALE")
alyr = currentscn$getscnlyr()
i = basemap$lyrnum(alyr)
b = basemap$lyrsdata[[i]]@bbox  # bbox(basemap$lyrsdata[[i]])
basemap$mapview@map <- basemap$mapview@map %>%
fitBounds(b[1], b[2], b[3], b[4])
basemap$mapview
basemap$mapview@map <- basemap$mapview@map(layer.name = alyr, zcol = "ISPALE")
basemap$mapview@map <- basemap$mapview@map %>%
basemap$mapview@map(layer.name = alyr, zcol = "ISPALE")
basemap$mapview@map <- basemap$mapview@map +
basemap$mapview@map(layer.name = alyr, zcol = "ISPALE")
basemap$mapview@map <- basemap$mapview@map + "breweries"
breweries
basemap$mapview@map <- basemap$mapview@map + breweries
basemap$mapview@map + breweries
mapview(franconia)
basemap$mapview(franconia)
basemap$mapview@map(franconia)
source("main.R")
source("maplib.R")
source("scnlib.R")
basemap$mapview
m = mapview(breweries)
self$mapview <- self$mapview + m
basemap$mapview <- basemap$mapview + m
basemap$mapview
source("main.R")
source("maplib.R")
source("scnlib.R")
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
basemap$mapview
basemap$mapview@map
basemap$displaymap()
m = mapview(layer.name = alyr, zcol = "ISPALE")
alyr = currentscn$getscnlyr()
m = mapview(layer.name = alyr, zcol = "ISPALE")
m = mapview(alyr, zcol = "ISPALE")
View(cfg)
View(basemap)
mapview()
m = basemap$mapview(alyr, zcol = "ISPALE")
m = basemap$mapview() %>%
basemap$mapview(alyr, zcol = "ISPALE")
basemap$mapview(alyr)
basemap$mapview@map(alyr)
mode(basemap$mapview)
show(basemap$mapview)
class(basemap$mapview)
m = basemap$mapview(breweries)
basemap$mapview(breweries)
basemap$mapview@map(franconia)
m = basemap$mapview@map + breweries
m = basemap$mapview + breweries
m
View(basemap)
source("main.R")
source("maplib.R")
source("scnlib.R")
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
alyr = currentscn$getscnlyr()
i = basemap$lyrnum(alyr)
lyrdata = basemap$lyrsdata[i]
View(lyrdata)
m = basemap$mapview + basemap$mapview(alyr, zcol = "ISPALE")
m = basemap$mapview(lyrdata, zcol = "ISPALE")
lyrdata = basemap$lyrsdata[[i]]
m = basemap$mapview(lyrdata, zcol = "ISPALE")
m = mapview(lyrdata, zcol = "ISPALE")
m
m = mapview(lyrdata, zcol = "RAV_TAZ")
m
basemap$mapview = basemap$mapview + m
basemap$mapview
View(basemap)
m = mapview(lyrdata, zcol = "RAV_TAZ", burst = TRUE)
m
m = mapview(lyrdata, zcol = "RAV_TAZ", burst = TRUE)
basemap$mapview
m = mapview(lyrdata, zcol = "DISTRICT", )
m
m = mapview(lyrdata, zcol = "DISTRICT" )
m
clrs <- sf.colors
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
m
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = FALSE )
m
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, burst=TRUE)
m
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, burst=TRUE, legend = FALSE)
m
basemap$mapview = basemap$mapview + m
basemap$mapview
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
basemap$mapview = basemap$mapview + m
basemap$mapview
View(basemap)
clrs <- sf.colors
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
#m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, burst=TRUE, legend = FALSE)
m
colors <- mapviewColors(x=lyrdata,
zcol = "DISTRICT",
colors = c("Red", "Green", "Blue"),
at = c("1","7", "4"))
m = mapview(lyrdata, zcol = "DISTRICT",col.regions = colors)
m
view(lyrdata)
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
x = SpatialPolygonsDataFrame_to_df(lyrdata, vars = names(lyrdata))
library("FRK")
yourDF <- as.data.frame(lyrdata)
View(yourDF)
m = mapview(yourDF, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
m
lyrdata %>%
mutate(dist = as.character("DISTRICT")) %>%
mapview(zcol = "dist", legend = TRUE)
class(lyrdata)
mode(lyrdata)
library(tidyverse)
library(tidyverse)
install.packages(tidyverse)
library(data.table)
library(tidyverse)
#library(tidyjson)
library(jsonlite)   # https://cran.r-project.org/web/packages/jsonlite/index.html
library(R6)
library(leaflet)
library(mapview)
#library(sp)
library(sf)
library(geojson)
library(geojsonio)
source("main.R")
source("maplib.R")
source("scnlib.R")
source("main.R")
source("maplib.R")
source("scnlib.R")
View(basemap)
shiny::runApp()
runApp()
runApp()
View(basemap)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scnsummary
View(scnclass)
runApp()
runApp()
View(currentscn)
packageVersion("shiny")
shiny::runApp()
shiny::runApp()
runApp()
library(shiny); runApp('TestApp.R')
runApp('TestApp.R')
runApp('TestApp.R')
runApp('TestApp.R')
cfg$scnsources = c ("A", "B", "C")
cfg = list()
cfg$scnsources = c ("A", "B", "C")
runApp('TestApp.R')
runApp('TestApp.R')
source("~/GitHub/ScenarioBank/dvlp/v0.3/maplib.R")
runApp('TestApp.R')
runApp('TestApp.R')
runApp()
runApp()

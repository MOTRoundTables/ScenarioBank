basemap$displaymap()
basemap$mapview(lyr, zcol = c("ISPALE"))
basemap$mapview(breweries, zcol = "founded")
View(basemap)
lyr
basemap$mapview %>%
mapview(lyr, zcol = c("ISPALE"))
basemap$mapview(lyr, zcol = "ISPALE")
basemap$mapview(lyr, zcol = "ID")
basemap$mapview@map(lyr, zcol = "ISPALE")
basemap$mapview(layer.name =lyr, zcol = "ISPALE")
basemap$mapview(layer.name =lyr, zcol = "ISPALE")
basemap$mapview
lyr %>%
basemap$mapview(zcol = "ISPALE")
source("main.R")
source("maplib.R")
source("scnlib.R")
source("main.R")
source("maplib.R")
source("scnlib.R")
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
basemap$mapview
basemap$mapview <- basemap$mapview(layer.name =lyr, zcol = "ISPALE")
alyr = currentscn$getscnlyr()
i = basemap$lyrnum(alyr)
b = basemap$lyrsdata[[i]]@bbox  # bbox(basemap$lyrsdata[[i]])
basemap$mapview@map <- basemap$mapview@map %>%
fitBounds(b[1], b[2], b[3], b[4])
basemap$mapview
basemap$mapview@map <- basemap$mapview@map(layer.name = alyr, zcol = "ISPALE")
basemap$mapview@map <- basemap$mapview@map %>%
basemap$mapview@map(layer.name = alyr, zcol = "ISPALE")
basemap$mapview@map <- basemap$mapview@map +
basemap$mapview@map(layer.name = alyr, zcol = "ISPALE")
basemap$mapview@map <- basemap$mapview@map + "breweries"
breweries
basemap$mapview@map <- basemap$mapview@map + breweries
basemap$mapview@map + breweries
mapview(franconia)
basemap$mapview(franconia)
basemap$mapview@map(franconia)
source("main.R")
source("maplib.R")
source("scnlib.R")
basemap$mapview
m = mapview(breweries)
self$mapview <- self$mapview + m
basemap$mapview <- basemap$mapview + m
basemap$mapview
source("main.R")
source("maplib.R")
source("scnlib.R")
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
basemap$mapview
basemap$mapview@map
basemap$displaymap()
m = mapview(layer.name = alyr, zcol = "ISPALE")
alyr = currentscn$getscnlyr()
m = mapview(layer.name = alyr, zcol = "ISPALE")
m = mapview(alyr, zcol = "ISPALE")
View(cfg)
View(basemap)
mapview()
m = basemap$mapview(alyr, zcol = "ISPALE")
m = basemap$mapview() %>%
basemap$mapview(alyr, zcol = "ISPALE")
basemap$mapview(alyr)
basemap$mapview@map(alyr)
mode(basemap$mapview)
show(basemap$mapview)
class(basemap$mapview)
m = basemap$mapview(breweries)
basemap$mapview(breweries)
basemap$mapview@map(franconia)
m = basemap$mapview@map + breweries
m = basemap$mapview + breweries
m
View(basemap)
source("main.R")
source("maplib.R")
source("scnlib.R")
currentscnnum <<- "7"  # new jer
currentscn <<- setScn(currentscnnum) # set scenario, session
currentscn$opentazdata()
alyr = currentscn$getscnlyr()
i = basemap$lyrnum(alyr)
lyrdata = basemap$lyrsdata[i]
View(lyrdata)
m = basemap$mapview + basemap$mapview(alyr, zcol = "ISPALE")
m = basemap$mapview(lyrdata, zcol = "ISPALE")
lyrdata = basemap$lyrsdata[[i]]
m = basemap$mapview(lyrdata, zcol = "ISPALE")
m = mapview(lyrdata, zcol = "ISPALE")
m
m = mapview(lyrdata, zcol = "RAV_TAZ")
m
basemap$mapview = basemap$mapview + m
basemap$mapview
View(basemap)
m = mapview(lyrdata, zcol = "RAV_TAZ", burst = TRUE)
m
m = mapview(lyrdata, zcol = "RAV_TAZ", burst = TRUE)
basemap$mapview
m = mapview(lyrdata, zcol = "DISTRICT", )
m
m = mapview(lyrdata, zcol = "DISTRICT" )
m
clrs <- sf.colors
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
m
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = FALSE )
m
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, burst=TRUE)
m
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, burst=TRUE, legend = FALSE)
m
basemap$mapview = basemap$mapview + m
basemap$mapview
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
basemap$mapview = basemap$mapview + m
basemap$mapview
View(basemap)
clrs <- sf.colors
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
#m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, burst=TRUE, legend = FALSE)
m
colors <- mapviewColors(x=lyrdata,
zcol = "DISTRICT",
colors = c("Red", "Green", "Blue"),
at = c("1","7", "4"))
m = mapview(lyrdata, zcol = "DISTRICT",col.regions = colors)
m
view(lyrdata)
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
install.packages("FRK")
x = SpatialPolygonsDataFrame_to_df(lyrdata, vars = names(lyrdata))
library("FRK")
yourDF <- as.data.frame(lyrdata)
View(yourDF)
m = mapview(yourDF, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
m = mapview(lyrdata, zcol = "DISTRICT", col.regions = clrs, legend = TRUE )
m
lyrdata %>%
mutate(dist = as.character("DISTRICT")) %>%
mapview(zcol = "dist", legend = TRUE)
class(lyrdata)
mode(lyrdata)
library(tidyverse)
library(tidyverse)
install.packages(tidyverse)
library(data.table)
library(tidyverse)
#library(tidyjson)
library(jsonlite)   # https://cran.r-project.org/web/packages/jsonlite/index.html
library(R6)
library(leaflet)
library(mapview)
#library(sp)
library(sf)
library(geojson)
library(geojsonio)
source("main.R")
source("maplib.R")
source("scnlib.R")
source("main.R")
source("maplib.R")
source("scnlib.R")
View(basemap)
shiny::runApp()
runApp()
runApp()
View(basemap)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scnsummary
View(scnclass)
runApp()
runApp()
View(currentscn)
packageVersion("shiny")
shiny::runApp()
shiny::runApp()
runApp()
library(shiny); runApp('TestApp.R')
runApp('TestApp.R')
runApp('TestApp.R')
runApp('TestApp.R')
cfg$scnsources = c ("A", "B", "C")
cfg = list()
cfg$scnsources = c ("A", "B", "C")
runApp('TestApp.R')
runApp('TestApp.R')
source("~/GitHub/ScenarioBank/dvlp/v0.3/maplib.R")
runApp('TestApp.R')
runApp('TestApp.R')
runApp()
runApp()
#currentscnnum <<- "7"  # new jer
currentscnnum <<- "8"  # BS
currentscn <<- setScn(currentscnnum) # set scenario, session
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/v0.3")  # for debug
# View(cfg)
# Sys.setlocale(locale="hebrew")
setwd("C:/Users/marsz/Documents/GitHub/ScenarioBank/dvlp/v0.3")  # for debug
source("main.R")
source("maplib.R")
source("scnlib.R")
#currentscnnum <<- "7"  # new jer
currentscnnum <<- "8"  # BS
currentscn <<- setScn(currentscnnum) # set scenario, session
View(cfg)
cfg$scenarios
cfg$scenarios$BS_v09
cfg$scenarios$BS_v09$files
View(basemap)
View(currentscn)
shiny::runApp()
runApp()
View(alyr)
Q
shiny::runApp()
library(mapview)
mapview?
?mapview
packageVersion("mapview")
install.packages("mapview")
install.packages("mapview")
currentscn$geolyr
shiny::runApp()
currentscn$scn$tazvar
currentscn$geolyr
currentscn$tazdata
x = currentscn$scn$tazvar
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( x = "taz" ) ) # currentscn$scn$tazvar
x
[x]
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = setNames( x = "taz" ) ) # currentscn$scn$tazvar
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = setNames( x ,"taz" ) ) # currentscn$scn$tazvar
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = setNames( 'TAZV41' ,"taz" ) ) # currentscn$scn$tazvar
currentscn$scn$tazvar
{currentscn$scn$tazvar}
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( {currentscn$scn$tazvar} = "taz" ) ) # currentscn$scn$tazvar
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( {currentscn$scn$tazvar} = {"taz"} ) ) # currentscn$scn$tazvar
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( 'TAZV41' = 'taz' ) )
View(df)
df <- NULL
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( {currentscn$scn$tazvar} = "taz" ) ) # currentscn$scn$tazvar
x = currentscn$scn$tazvar
{x}
x
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( {x} = "taz" ) ) # currentscn$scn$tazvar
df3 <- left_join(df1, df2, join_by = c(id == x, name == 'taz'))
df3 <- left_join(currentscn$geolyr, currentscn$tazdata, join_by = c(id == x, taz == 'taz'))
currentscn$geolyr{x}
currentscn$geolyr[[x]]
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( currentscn$geolyr[[x]] = "taz" ) ) # currentscn$scn$tazvar
df <- left_join(currentscn$geolyr, currentscn$tazdata, by = c( {currentscn$geolyr[[x]]} = "taz" ) ) # currentscn$scn$tazvar
emp_df=data.frame(
emp_id=c(1,2,3,4,5,6),
name=c("Smith","Rose","Williams","Jones","Brown","Brown"),
emp_dept_id=c(10,20,10,10,40,50),
emp_dept_branch_id= c(101,102,101,101,104,105)
)
# Create dept Data Frame
dept_df=data.frame(
dept_id=c(10,20,30,40),
dept_name=c("Finance","Marketing","Sales","IT"),
dept_branch_id= c(101,102,103,104)
)
emp_df
dept_df
dfEmp  <- data.frame(EmpId = c(1, 2, 3),
Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),
Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all = FALSE)
d1
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x = a, by.y = b, all = FALSE)
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x = {a}, by.y = {b}, all = FALSE)
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x == a, by.y == b, all = FALSE)
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x == {a}, by.y == {b}, all = FALSE)
a = "EmpId"
b = "EmployeeID"
d2 = merge(x = dfEmp, y = dfEmpAdr, by.x = a, by.y = b, all = FALSE)
d2
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(a, b))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(a =b))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c({a} = {b}))
xx = paste(a, "=", b, sep = "")
xx
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(xx))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c({xx}))
d3 <- left_join(dfEmp, dfEmpAdr, join_by = c(a = b))
dfEmp  <- data.frame(EmpId = c(1, 2, 3),
Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),
Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all = FALSE)
d1
d2 =  left_join(dfEmp, dfEmpAdr, join_by = c(EmpId = EmployeeID))
d2 =  left_join(dfEmp, dfEmpAdr, join_by = c("EmpId" = "EmployeeID"))
d1
d2 =  left_join(dfEmp, dfEmpAdr, join_by = c('EmpId' = 'EmployeeID'))
d2 =  dfEmp %>%
left_join(dfEmpAdr, join_by = c('EmpId' = 'EmployeeID'))
d2 =  dfEmp %>%
left_join(dfEmpAdr, join_by = c(EmpId = 'EmployeeID'))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}, {{b}}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}=={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c(a=b))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({a}={b}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, join_by = c({{a}}=={{b}}))
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
a = "EmpId"
b = "EmployeeID"
d4  = left_join(dfEmp, dfEmpAdr, by = c(a=b))
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
dfEmp  <- data.frame(EmpId = c(1, 2, 3),  Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),  Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
a = "EmpId"
b = "EmployeeID"
d4  = left_join(dfEmp, dfEmpAdr, נy=c(!!a=!!b))
d4  = left_join(dfEmp, dfEmpAdr, by=c(!!a=!!b))
d4  = left_join(dfEmp, dfEmpAdr, by=c(!!a==!!b))
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, by=names(a,b))
d4  = left_join(dfEmp, dfEmpAdr, by=names(a=b))
d4  = left_join(dfEmp, dfEmpAdr, by=names({a}={b}))
d4  = left_join(dfEmp, dfEmpAdr, by=names(rlang::enquos(a)=rlang::enquos(b)))
rlang::enquos(a)
d <- left_join(dfEmp, dfEmpAdr, by = c(a = b))
d <- merge(dfEmp, dfEmpAdr, by.x = a, by.y = b)
d
d <- merge(dfEmp, dfEmpAdr, by.x = a, by.y = b, all.x=TRUE)
d
d1
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
d4  = left_join(dfEmp, dfEmpAdr, by = c({{a}}=={{b}}))
d4  = left_join(dfEmp, dfEmpAdr, by = c({a}=={{b}}))
{{a}}
!!as.symbol(a)
d4  = left_join(dfEmp, dfEmpAdr, by = c("{{a}}=={{b}}"))
x = "{{a}}=={{b}}"
x = {{a}}+"=="+{{b}}
df <- merge(currentscn$geolyr, currentscn$tazdata, by.x = currentscn$scn$tazvar, by.y = "taz", all.x=TRUE)
runApp()
currentscn$scn$tazvar
{currentscn$scn$tazvar}
df <- merge(currentscn$geolyr, currentscn$tazdata, by.x = currentscn$scn$tazvar, by.y = "taz", all.x=TRUE)
View(df)
view(currentscn$geolyr)
view(currentscn$tazdata)
runApp()
joinvar = currentscn$scn$files[[1]][[4]][[1]]
runApp()
runApp()
runApp()
runApp()
fl
self$scn$dir
self$scn$file
View(currentscn)
dfEmp  <- data.frame(EmpId = c(1, 2, 3),  Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),  Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
library(tidyverse)
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
a = "EmpId"
b = "EmployeeID"
d3 = dfEmp %>% left_join(dfEmpAdr,by = setNames(a,b))
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all = FALSE)
d1
d1 = merge(x = dfEmp, y = dfEmpAdr,
by.x = "EmpId", by.y = "EmployeeID", all.x=TRUE)
d1
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
shiny::runApp()
View(currentscn)
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
dfEmp  <- data.frame(EmpId = c(1, 2, 3),  Name = c("Josephine J. Evans", "Sophie D. Sessions", "Geneva R. Miller"))
dfEmp
dfEmpAdr <- data.frame(EmployeeID = c(3, 2, 4),  Company = c("Monmax", "Heilig-Meyers", "MegaSolutions"))
dfEmpAdr
d2 =  dfEmp %>% left_join(dfEmpAdr, by = c('EmpId' = 'EmployeeID'))
d2
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
a = "EmpId"
b = "EmployeeID"
d3 =  dfEmpAdr %>% left_join(dfEmp,by = setNames(a,b))
d3
d3 = dfEmp %>% left_join(dfEmpAdr, by = setNames(a,b))
d3 = dfEmp %>% left_join(dfEmpAdr, by = setNames(b,a))
d3
setNames(b,a)
runApp()
library(leaflet)
library(mapview)
library(sf)
library(geojsonsf)
library(jsonlite)
library(tidyverse)
cfg = fromJSON("dvlp/v0.3/scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]][[j]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
View(cfg)
library(leaflet)
library(mapview)
library(sf)
library(geojsonsf)
library(jsonlite)
library(tidyverse)
cfg = fromJSON("dvlp/v0.3/scbank.json")
cfg$general$geodir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$geodir, fixed=TRUE)
cfg$general$scndir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$scndir, fixed=TRUE)
cfg$general$rsltdir = gsub("<sysdir>", cfg$general$sysdir, cfg$general$rsltdir, fixed=TRUE)
# load scenario dicts
n = length(cfg$scenariolist)
cfg$scenarios = list()
cfg$scnsources = list()
cfg$scnkeys = vector()
for (i in 1:n) {
cfg$scnsources = append(cfg$scnsources, cfg$scenariolist[[i]][[1]])
n2 = length(cfg$scenariolist[[i]][[2]])
for (j in 1:n2) {
cfg$scnkeys = append(cfg$scnkeys, cfg$scenariolist[[i]][[2]][[j]])
x = fromJSON(paste(cfg$general$scndir, cfg$scenariolist[[i]][[2]][[j]], "/scenario.json", sep = ""))
y = list()
y[[cfg$scenariolist[[i]][[2]][[j]]]] = x
cfg$scenarios = append(cfg$scenarios, y)
}
}
scn <- cfg$scenarios$TA2016
# 1 open geo json
url = paste0("Scn_lib/",scn$dir,"/", scn$tazfile)
geolyr <- geojson_sf(url)
# 2 open taz data
fl = paste("Scn_lib/",scn$dir, "/", scn$file, sep="")
tazdata = read_csv(fl)
# 3 find a list of years in tazdata
years <- tazdata %>% distinct(Year) %>% pull(Year)
# 4 find a list of scenarios in tazdata
scens <- tazdata %>% distinct(Scenario)%>% pull(Scenario)
shiny::runApp()
runApp()
shiny::runApp()
setwd("~/GitHub/ScenarioBank")
runApp('dvlp/v0.3')
shiny::runApp()
#cfg = fromJSON("dvlp/v0.3/scbank.json")
cfg = fromJSON("scbank.json")
runApp()
source("main.R")
source("main.R")
source("main.R")
source("main.R")
cfg$scenariolist[[i]][[2]][[j]]
cfg$scenariolist[[i]][[2]][[j]]
cfg$scenariolist[[i]][[2]][[j]]
cfg$scenariolist[[i]][[2]][[j]]
source("main.R")

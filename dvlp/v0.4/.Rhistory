shiny::runApp()
shiny::runApp()
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/conditionalpanel.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/conditionalpanel.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/conditionalpanel.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/conditionalpanel.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/conditionalpanel.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/conditionalpanel.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(currentfrcst)
x = [2020, 2017, 2020, 2040]
x = vector()
x = [2020, 2017, 2020, 2040]
x = c(2020, 2017, 2020, 2040)
mode(x)
y = unique(x)
y
y = sort(unique(x))
y
rm(x)
rm(y)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
View(analisystype)
View(currentfrcst)
z = currentfrcst$getscnyears()
View(currentfrcst)
currentfrcst$getscnyears()
self.scnlist
self
scnlist
self.scnlist
runApp()
runApp()
input$selectscn
runApp()
View(userreq)
runApp()
View(userreq)
runApp()
View(userreq)
scn
userreq$scn
userreq$scn[1]
userreq$scn[[1]]
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
cfg$frcstchoices
runApp()
runApp()
runApp()
self$scnlist
ascn
is.character(ascn)
is.vector(ascn)
is.vector("ascn")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(userreq)
View(userreq)
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
currentfrcst$loadfrcst()
afrcst$loadfrcst()
View(afrcst)
afrcst
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
View(cfg)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
afrcst$loadfrcst()
xx = afrcst$loadfrcst()
afrcst$loadfrcst()
afrcst$name
afrcst$loadfrcst()
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
afrcst$name
afrcst$loadfrcst()
userreq = list()
userreq$frcst = afrcst
userreq$scn = c("BAU")    # "BASE", "BAU", "IPLAN", "JTMT"
userreq$yr = c(2020)      # 2020, 2025, 2030, 2035, 2040, 2045, 2050
userreq$var = "pop"       # "pop", "emp_tot":
x = createMap(userreq)
userreq$mode = 1          # change to 3 if multiple
x = createMap(userreq)
x
x = createMap(userreq)
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
afrcst$name
afrcst$loadfrcst()
View(afrcst)
userreq = list()
userreq$frcst = afrcst
userreq$scn = c("BAU")    # "BASE", "BAU", "IPLAN", "JTMT"
userreq$yr = c(2020)      # 2020, 2025, 2030, 2035, 2040, 2045, 2050
userreq$var = "pop"       # "pop", "emp_tot":
userreq$mode = 1          # change to 3 if multiple
x = createMap(userreq)
runApp()
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
afrcst$name
afrcst$loadfrcst()
userreq = list()
userreq$frcst = afrcst
userreq$scn = c("BAU")    # "BASE", "BAU", "IPLAN", "JTMT"
userreq$yr = c(2025)      # 2020, 2025, 2030, 2035, 2040, 2045, 2050
userreq$var = "pop"       # "pop", "emp_tot":
userreq$mode = 1          # change to 3 if multiple
x = createMap(userreq)
cat(aFrcst$name, aScn, aYr, dataVar)
x
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/picker.R')
runApp()
self$resetmapview(mapproperties)
runApp()
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/buttons.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/center1.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/center2.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/buttons.R')
shiny::runApp()
runApp()
runApp()
View(userreq)
View(currentfrcst)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs2.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/update_tabset.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs.R')
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/colortabs1.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/colortabs2.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/tabs.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/GitHub/ScenarioBank/dvlp/v0.4/test_multi_map.R")
# source("dvlp/v0.4/main.R")
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
afrcst$name
afrcst$loadfrcst()
userreq = list()
userreq$frcst = afrcst
userreq$scn = c("IPLAN","BAU")    # "BASE", "BAU", "IPLAN", "JTMT"
userreq$yr = c(2020,2025,2030,2035,2040,2045,2050)      # 2020, 2025, 2030, 2035, 2040, 2045, 2050
userreq$var = "pop"       # "pop", "emp_tot":
userreq$mode = 3          # change to 3 if multiple
x = createMultiMap(userreq)
x
source("~/GitHub/ScenarioBank/dvlp/v0.4/test_multi_map.R")
# source("dvlp/v0.4/main.R")
source("main.R")
frcstky = "jeru23v09"
frcstnum <- cfg$frcstnums[[frcstky]]  # getfrcstnum(currentfrcstky)
afrcst <<- cfg$forecasts[[frcstnum]]   #  setFrcst(aFrcst) # set scenario  --> main
afrcst$name
afrcst$loadfrcst()
userreq = list()
userreq$frcst = afrcst
userreq$scn = c("IPLAN","BAU")    # "BASE", "BAU", "IPLAN", "JTMT"
#userreq$yr = c(2020,2025,2030,2035,2040,2045,2050)      # 2020, 2025, 2030, 2035, 2040, 2045, 2050
userreq$yr = c(2025)
userreq$var = "pop"       # "pop", "emp_tot":
userreq$mode = 3          # change to 3 if multiple
x = createMultiMap(userreq)
x

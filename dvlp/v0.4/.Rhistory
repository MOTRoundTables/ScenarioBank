browser()
x$a="1"
}
z <- list( z1=list(a="1",b=2,c=3), z2=list(a="2",b=1,c=1), z3=list(a="1",b=1,c=1))
map(z, f)
zz = lapply(z, f)
zz = lapply(z, f)
f <- function(x){
#browser()
x$a="1"
}
z <- list( z1=list(a="1",b=2,c=3), z2=list(a="2",b=1,c=1), z3=list(a="1",b=1,c=1))
zz = lapply(z, f)
zz
zz = map(z, f)
zz
zz = modify(z, f)
zz
f <- function(x){
browser()
x$a="1"
}
z <- list( z1=list(a="1",b=2,c=3), z2=list(a="2",b=1,c=1), z3=list(a="1",b=1,c=1))
zz = lapply(z, f)
x
x$a
z <- list( z1=list(a="1",b=2,c=3), z2=list(a="2",b=1,c=1), z3=list(a="1",b=1,c=1))
Filter(function(x) x$a=="1", z)
zz = Filter(function(x) x$a=="1", z)
rm(l1)
rm(lmn_cars)
rm(movies_lower)
rm(x)
rm(z)
rm(zz)
rm(dt)
dict
dd = Filter(function(x) x$group!="לא בשימוש", dict)
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
runApp()
runApp()
runApp()
runApp()
y$group
y$group[1]
runApp()
runApp()
y$group
(y$group!="זיהוי")
((y$group!="לא בשימוש")&&(y$group!="זיהוי"))
y$group
y$group
y$group
(y$group!="לא בשימוש")
(y$group!="זיהוי")
((y$group!="לא בשימוש")&&(y$group!="זיהוי"))
y$description
ifelse(!is.null(y$description), y$description, self$vars[i])
runApp()
View(self)
runApp()
View(self)
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
# data
cities <- data.frame(
continent = c("America", "America", "America", "Africa",
"Africa", "Africa", "Africa", "Africa",
"Europe", "Europe", "Europe", "Antarctica"),
country = c("Canada", "Canada", "USA", "Tunisia", "Tunisia",
"Tunisia", "Algeria", "Algeria", "Italy", "Germany", "Spain", NA),
city = c("Trois-Rivières", "Québec", "San Francisco", "Tunis",
"Monastir", "Sousse", "Alger", "Oran", "Rome", "Berlin", "Madrid", NA),
stringsAsFactors = FALSE
)
View(cities)
x =  create_tree(cities)
View(x)
runApp()
runApp()
runApp()
View(tmp)
c1 = c("America", "America", "America", "Africa",
"Africa", "Africa", "Africa", "Africa",
"Europe", "Europe", "Europe", "Antarctica")
cities <- data.frame(
continent = c1,
country = c("Canada", "Canada", "USA", "Tunisia", "Tunisia",
"Tunisia", "Algeria", "Algeria", "Italy", "Germany", "Spain", NA),
city = c("Trois-Rivières", "Québec", "San Francisco", "Tunis",
"Monastir", "Sousse", "Alger", "Oran", "Rome", "Berlin", "Madrid", NA),
stringsAsFactors = FALSE
)
View(cities)
class(c1)
mode(c1)
View(currentfrcst)
View(currentfrcst)
a = currentfrcst$dispvatdesc
View(currentfrcst)
a = currentfrcst$dispvarsdesc
a = currentfrcst$dispvarsgroup
b = currentfrcst$dispvarsdesc
y <- data.frame(
continent = a,
country = b,
stringsAsFactors = FALSE
)
View(y)
y <- data.frame(
continent = unlist(a),
country = unlist(b),
stringsAsFactors = FALSE
)
View(y)
yy <- data.frame(
currentfrcst$dispvarsgroup,
currentfrcst$dispvarsdesc,
stringsAsFactors = FALSE
)
View(yy)
runApp()
View(tmp)
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/updTreeINput.R')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/mastering/10_31.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/mastering/10_31.R')
runApp()
runApp()
runApp()
input$selectfrcst
runApp()
runApp()
input$selectscn
input$selectyr
input$selectvar
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/treeinput.R')
runApp('C:/Users/marsz/OneDrive/temp/shiny/learn/ui/awsome/virtualselect.R')
library(shinyWidgets)
# Default usage
demoVirtualSelect("default")
# Update widget from server
demoVirtualSelect("update")
# Differents ways of specifying choices
demoVirtualSelect("choices-format")
# Prepare choices from a data.frame
demoVirtualSelect("prepare-choices")
runApp()
runApp()
runApp()
userreq$var
input$selectvar
x = cfg$vargroups
xx = data.frame(x)
View(xx)
xx = data.frame(cfg$vargroups, stringsAsFactors = FALSE)
View(xx)
rm(xx)
xx = data.frame(cfg$vargroups, stringsAsFactors = FALSE)
View(xx)
View(xx)
View(x)
library(data.table)
xx = rbindlist(cfg$vargroups, fill=TRUE)
View(xx)
dfs <- lapply(x, data.frame, stringsAsFactors = FALSE)
View(dfs)
rbind.fill(dfs)
bind_rows(dfs)
xxxx = bind_rows(dfs)
View(xxxx)
xxxx = bind_rows(cfg$vargroups)
View(xxxx)
do.call(rbind, lapply(x, data.frame))
XXXX = do.call(rbind, lapply(x, data.frame))
View(XXXX)
XXXXX = data_frame <- as.data.frame(do.call(cbind, x))
View(XXXXX)
XXXXXXX <- as.data.frame(do.call(cbind,x))
View(XXXXXXX)
y = cfg$vargroups
y[[1]]
y[1]
y[1][1]
y
y[2]
y[2][1]
y[2][2]
y[2][1][1]
y[2][1][1][1]
y[[2]]
y[[2]]][[1]]
y[[2]][[1]]
y[[2]][[0]]
xx <- list()
xx$a$id = l
xx$a$nam = "aaa"
xx$b$id = 2
xx$b$nam = "bbbb"
x
xx
y <- lapply(xx, FUN = function(x){
browser()
names(x) <- my_names
return(x)
})
x
y <- lapply(xx, FUN = function(x){
browser()
names(x) <- my_names
return(x)
})
xx
names(xx)
xx <- list()
xx$a$id = l
xx$a$nam = "aaa"
xx$b$id = 2
xx$b$nam = "bbbb"
str(xx)
xx <- list()
xx$a$id = l
xx$a$id = 1
xx$a$nam = "aaa"
xx$b$id = 2
xx$b$nam = "bbbb"
str(xx)
xx
tmp = names(xx)
str(tmp)  # xx
attributes(xx)
mapply(function(xx, i) print(i, x))
mapply(function(xx, i) {
browser()
print(i, x)} )
# Convert a named list to an unnamed list, keeping the names in the list
convert_named_list_to_unnamed <- function(named_list) {
# Create a new empty list to store the unnamed list.
unnamed_list <- list()
# Iterate over the named list and add each element to the new unnamed list, along with its name.
for (i in seq_along(named_list)) {
unnamed_list[[i]] <- named_list[[i]]
names(unnamed_list)[[i]] <- names(named_list)[[i]]
}
# Return the new unnamed list.
return(unnamed_list)
}
yy = convert_named_list_to_unnamed(xx)
View(yy)
View(yy)
XX[[1]]
yy = convert_named_list_to_unnamed(xx)
XX[[1]]
str(xx)  # xx
XX[1]
xx[[1]]
names(xx)[1]
View(yy)
View(yy)
View(xx)
View(xx)
frcstclass <- R6Class("Frcstclass",
public = list(
num = NULL,         # ordinal # of frcst in cfg
ky = NULL,          # frcst code
name = NULL,        # frcst name
dir = NULL,         # frcst directory
data = NULL,        # a copy of scenario.json
# scenarios
scnlist = NULL,       # vector of available scn codes
scnnames = NULL,      # vector of available scn names
scnchoices = NULL,    # list of scn for menu [[name:code]]
# vars
vars = NULL,          # vector of dict vars
vardesc = NULL,       # vector of dict vars descriptions
bankvars = NULL,      # vector of bank vars in dict
dispvars = NULL,      # vars 4 menu
dispvarsgroup = NULL, # vars 4 menu grps
dispvarsdesc = NULL,  # vars 4 menu descs
varstree = NULL,    # list of vars for menu [[name:var]]
varchoices = NULL,       # list of vars for menu [[name:var]]
# data
geolyr = NULL,      # the geojson data
tazdata = NULL,     # the frcst csv data
initialize = function(num, frcstky, frcstdir) {
self$num = num
self$ky = frcstky
x = fromJSON(paste0(frcstdir, frcstky, "/scenario.json"))
self$name = x$name
self$dir = paste0(frcstdir, x$dir, "/")
self$data = x
self$scnlist = names(x$scenarios)
self$scnnames = list()
self$scnchoices = vector(mode = "list")
for (i in 1:length(self$scnlist)) {
y = x$scenarios[[self$scnlist[i]]]
self$scnnames = append(self$scnnames, y$desc)
self$scnchoices[y$desc] = self$scnlist[i]
}
self$vars = names(x$dict)
self$vardesc = list()
self$dispvars = list()
self$dispvarsgroup = list()
self$dispvarsdesc = list()
self$bankvars = list()
for (i in 1:length(self$vars)) {
y = x$dict[[self$vars[i]]]
if (!is.null(y$bank)) {
self$bankvars[[y$bank]] = self$vars[i]
}
self$vardesc = append(self$vardesc, ifelse(!is.null(y$description), y$description, self$vars[i]))
#if (!is.null(y$description)) { self$vardesc = append(self$vardesc, y$description) }
if ((y$group!="לא בשימוש")&&(y$group!="זיהוי")) {
self$dispvars = append(self$dispvars, self$vars[i])
self$dispvarsgroup = append(self$dispvarsgroup, y$group)
self$dispvarsdesc = append(self$dispvarsdesc, ifelse(!is.null(y$description), y$description, self$vars[i]))
}
}
self$varchoices = vector(mode = "list")
#for (i in 2:length(self$vars)) {
#   self$varchoices[as.character(self$vardesc[i])] = self$vars[i]
#  }
for (i in 2:length(self$dispvars)) {
self$varchoices[as.character(self$dispvarsdesc[i])] = self$dispvars[i]
}
tmp <- data.frame(
group = unlist(self$dispvarsgroup),
vars = unlist(self$dispvarsdesc),
stringsAsFactors = FALSE
)
self$varstree = create_tree(tmp)
},
# - scenario functions  -------------------------------------
loadfrcst = function() {  # loads frcst data: geo + csv
self$getgeolyr()
self$opentazdata()
},
getscnyears = function(ascn = NULL) { # ascn may be: 1 scenario, null or a vector
if (is.null(ascn)) { ascn = self$scnlist }   # null for all scenarios
if (length(ascn)==1) {                    # 1 scn
result = self$data$scenarios[[ascn[[1]]]]$years
} else {
result = vector()
for (i in 1:length(ascn)) {
result = append(result, self$data$scenarios[[ascn[i]]]$years)
}
result = sort(unique(result))
}
return(result)
},
# - forecast layer -------------------------------------
getfrcstlyr = function() {
return(self$data$tazlyr)
},
getgeolyr = function() {
if (is.null(self$geolyr)) {
url = paste(self$dir, self$data$tazfile, sep="")
#self$geolyr <- geojson_read(url, what = "sp")   # at this stage only support geojson
self$geolyr <- geojson_sf(url)
}
},
frcst2lyr = function() {
if (is.null(self$data$tazname)) { self$data$tazname = self$data$tazlyr }  # can define optional tazname
frcstlyr <- list(
lyr = self$getfrcstlyr(),        # the code of the layer
name = self$data$tazname,
zvar = self$data$tazvar,
zname = "NA",
#file = self$data$tazfile,
group = "forecasts",  # "שכבות תחזיות",
pane = "other",
color = "#FF0000",
weight = 2,
fillOpacity = 0,
popupcontent = "NA", #"'שכבת נפות<br>'+'מספר נפה =' + feature.properties.NafaNum + ' <br> שם נפה ='+feature.properties.Nafa",
type  = "a",
initialstatus = 1,  # display
status = 0
)
temp = list(frcstlyr)
temp = temp %>%
map_df(as_tibble)
return(temp)
},
# - forecast data functions  --------------------------------
opentazdata = function() {
if (is.null(self$tazdata)) {
fl = paste(self$dir, "/", self$data$file, sep="")
self$tazdata = fread(fl)  # read_csv(fl)
}
},
getfrcstvars = function() {
v = self$vars[2:length(self$vars)]
return(v)
},
getfrcstbankvars = function() {
v = unlist(self$bankvars, use.names = FALSE)
return(v)  #(v[2:length(v)])
},
# - aggregation functions  -------------------------------------
getagvars = function() {
return(self$data$agvars)
}
)
) # end mymap class
runApp()
x = cfg$vargroups
y = data.frame(t(sapply(x,c)))
View(y)
y <- as.data.frame(do.call(cbind, x))
y <- as.data.frame(t(do.call(cbind, x)))
y
view(y)
View(currentfrcst)
x = currentfrcst$varstree
x
view(x)
tmp <- data.frame(
group = unlist(currntfrcst$dispvarsgroup),
vars = unlist(currntfrcst$dispvarsdesc),
stringsAsFactors = FALSE
)
tmp <- data.frame(
group = unlist(currentfrcst$dispvarsgroup),
vars = unlist(currentfrcst$dispvarsdesc),
stringsAsFactors = FALSE
)
rm(x)
rm(y)
view(tmp)
x = cfg$vargroups
df <- as_tibble(x)
view(df)
df <- as_tibble(t(x))
view(df)
df <- as_tibble(x)
view(df)
view(cfg$vargroupsdf)
# - process main dict
cfg$vargroupsdf = data.frame(t(sapply(cfg$vargroups,c)))
view(cfg$vargroupsdf)
df2 <- tmp %>% inner_join( cfg$vargroupsdf, by=c('group'='name'))
cfg$vargroupsdf <- do.call(rbind, lapply(cfg$vargroups, stack))
view(cfg$vargroupsdf)
x =
cfg$vargroupsdf = data.frame(t(sapply(unlist(cfg$vargroups),c)))
view(cfg$vargroupsdf)
x =
cfg$vargroupsdf = data.frame(t(sapply(cfg$vargroups,c)))
view(cfg$vargroupsdf)
z = unlist(cfg$vargroupsdf)
df2 <- tmp %>% inner_join( z, by=c('group'='name'))
z = bind_rows(cfg$vargroups)
view(z)
view(z)
df2 <- tmp %>% inner_join( z, by=c('group'='name'))
df2
view(df2)
df2 <- tmp %>% inner_join( z, by=c('group'='name')) %>%
arrange(level)
view(df2)
runApp()
runApp()
runApp()
input$selectvar
runApp()
tmp <- data.frame(
group = unlist(currentfrcst$dispvarsgroup),
vars = unlist(currentfrcst$dispvarsdesc),
stringsAsFactors = FALSE
)
tmp2 = bind_rows(cfg$vargroups)
tmp <- tmp %>% inner_join(tmp2, by=c('group'='name')) %>% arrange(level)
tmp <- data.frame(
group = unlist(currentfrcst$dispvarsgroup),
vars = unlist(currentfrcst$dispvarsdesc),
stringsAsFactors = FALSE
)
tmp2 = bind_rows(cfg$vargroups)
tmp3 <- tmp %>% inner_join(tmp2, by=c('group'='name')) %>% arrange(level)
view(tmp)
view(tmp3)
tmp3 <- tmp %>% inner_join(tmp2, by=c('group'='name')) %>% arrange(level) %>% select(group, vars
view(tmp3)
tmp3 <- tmp %>% inner_join(tmp2, by=c('group'='name')) %>% arrange(level) %>% select(group, vars)
view(tmp3)
runApp()
input$selectvar
input$selectvar
runApp()
input$selectvar
View(currentfrcst)
input$selectvar[input$selectvar %in% currentfrcst$dispvarsdesc]
unique(input$selectvar[input$selectvar %in% currentfrcst$dispvarsdesc])
t = c("אוכלוסייה" ,"מועסקים")
currentfrcst$dispvars
lapply(t, function(x) currentfrcst$dispvars[which(x, currentfrcst$dispvarsdesc)])
tt = lapply(t, function(x) {
currentfrcst$dispvars[which(x==currentfrcst$dispvarsdesc)]
})
tt
runApp()
View(userreq)
View(userreq)
runApp()

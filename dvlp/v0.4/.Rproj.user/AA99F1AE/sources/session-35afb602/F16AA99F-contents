# scenario bank application

library(shiny)
library(shinythemes)  # https://rstudio.github.io/shinythemes/
library(shinyWidgets) # https://dreamrs.github.io/shinyWidgets/index.html
#library(shinybrowser) # https://github.com/daattali/shinybrowser
library(waiter)       # https://waiter.john-coene.com/#/  #https://shiny.john-coene.com/waiter/

source("main.R")

# Define UI for application that draws a histogram
ui <- fluidPage(
  shinybrowser::detect(),  # https://github.com/daattali/shinybrowser
  tags$html(dir="rtl", lang="he"),
  includeCSS("app.css"),  
  waiter::use_waiter(),
  #titlePanel("בנק תחזיות"),

  navbarPage("בנק התחזיות", selected = "צפייה",
             theme = shinytheme("united"),  # "lumen"  "united"  "cerulean"

      tabPanel("השוואה",

      ), # tabPanel השוואה
      
      # ------------------------------------------------------
       
      tabPanel("צפייה", fluid = TRUE, #icon = icon("globe-americas"), #tags$style(button_color_css),

       fluidRow(
         column(1, selectizeInput('selectview', 'חלון', choices = cfg$views$name,
                                  options = list(
                                    placeholder = 'בחר מתוך הרשימה ...',
                                    onInitialize = I('function() { this.setValue(""); }') ) )
         ),
         column(2, offset = 7, selectizeInput('selectfrcst', 'תחזית', choices = character(0), 
                               options = list(
                                 placeholder = 'בחר מתוך הרשימה ...',
                                 onInitialize = I('function() { this.setValue(""); }') ) ),
         ),
         column(2, selectizeInput('selectsrc', 'מקור תחזית', choices = cfg$frcstsources,
                                  options = list(
                                    placeholder = 'בחר מתוך הרשימה ...',
                                    onInitialize = I('function() { this.setValue(""); }') ) )
         )
         
       ),
       
       
      # <hr style="margin-top: 0px;margin-bottom: 20px;">
      tags$hr(style="margin-top: 0px;margin-bottom: 20px;"),

      sidebarLayout(position = "right",
                    
        sidebarPanel( width = 2,
          #titlePanel("בנק"),

          selectInput('selectscn', 'תרחיש', "", multiple=TRUE, selectize=FALSE),
          fluidRow(
           column(6, actionButton("selectscnclr", "נקה הכל", style='width:80%;padding-top:2px;padding-bottom:2px;margin-bottom:3px') ),
           column(6, actionButton("selectscnall", "בחר הכל", style='width:80%;padding-top:2px;padding-bottom:2px;margin-bottom:3px') ),
          ),

          #selectInput('selectyr', 'שנה', "", multiple=FALSE, selectize=FALSE),
          prettyCheckboxGroup(inputId = "selectyr", label = "שנה", 
                              status = "danger", fill = FALSE),
          fluidRow(
            column(6, actionButton("selectyrclr", "נקה הכל", style='width:80%;padding-top:2px;padding-bottom:2px;margin-bottom:3px') ),
            column(6, actionButton("selectyrall", "בחר הכל", style='width:80%;padding-top:2px;padding-bottom:2px;margin-bottom:3px') ),
          ),
          
          hr(),
          uiOutput("treevar"),
          #selectInput('selectvar', 'משתנה', "", multiple=FALSE, selectize=FALSE),

          # ----------------------------------------------

          selectInput('selectSz', 'רמת תצוגה', "", multiple=FALSE, selectize=FALSE),
          
          # ----------------------------------------------
          
          selectInput('selectanalysis', 'עיבוד', choices = cfg$analisystype, 
                    selected = 1, multiple=FALSE, selectize=FALSE),

          hr(),
          actionButton("doanalisys", "הפעל", style='width:100%'),
          hr(),
          actionButton("clearall", "נקה הכל"),
          actionButton("test", "פיתוח")
          
        ),

    # Show a plot of the generated distribution
    mainPanel( width = 10,
          #tags$style(HTML(".tabbable > .nav > li > a  {font-weight: bold;}")),
          tabsetPanel(id = "tabs1", type = "tabs", selected = "map",

              tabPanel("טבלה",   value = 'Table',
                       dataTableOutput("Frcsttable")
              ),
              tabPanel("תרשים", br(),  value = 'chart',
                       uiOutput("FrcstChart") # plotOutput("FrcstChart")
              ),
              tabPanel("תקציר",   value = 'Summary',
                       uiOutput("Frcstsummary") #verbatimTextOutput("Frcstsummary")
              ),
              tabPanel("מפה",  value = 'map', 
                       div(
                       uiOutput("leaf")
                       )
              )
          )
        )

    ) # sidebarLayout
    ) # tabPanel צפייה

    # ------------------------------------------------------
    
  ) # navbarPage
)

# --------------------------------------------------

server <- function(input, output, session) {
  
  observe({  # update map height
    #addbrowserinfo(shinybrowser::get_all_info())
    cat("geth\n")
    w = shinybrowser::get_width()
    h = shinybrowser::get_height()
    addbrowserinfo(w, h)
    refreshmap()
  })

  # --------- tabPanel "צפייה"

  observeEvent(input$selectview, {   # zoom to views
    if (input$selectview!="")  {
      basemap$setview(unlist(cfg$views[cfg$views$name == input$selectview, ]$bounds))
      refreshmap()
    }
  })

  clearselections <- function(lvl) {
    if (lvl>2) {  # lvl =3
      clearcurrentscn()
      currentsrc <<- ""
      updateSelectInput(session, "selectsrc", selected = character(0) )  # reset sources
      updateSelectInput(session, "selectfrcst", choices = "", selected = character(0) )  # reset sources
    }
    if (lvl>1) {  # lvl =2
       updateSelectInput(session, "selectscn", choices = "", selected = character(0) )
       updatePrettyCheckboxGroup(session, "selectyr", selected = character(0), 
                                 choices = "" )  # does not clear nut it will do
       updateTreeInput(inputId = "selectvar", selected = character(0))
       #updateSelectInput(session, "selectvar", choices = "", selected = character(0) )
    }
    if (lvl>0) {  # lvl =1 
      updatePrettyCheckboxGroup(session, "selectyr", selected = character(0), 
                                choices = "" )  # does not clear nut it will do
      updateTreeInput(inputId = "selectvar", selected = character(0))
      #updateSelectInput(session, "selectvar", choices = "", selected = character(0) )
    }
    
  }

  observeEvent(input$clearall, {            # reset: clear all user selections
    clearselections(9)  # clear scn,years,vars
    refreshmap()  # clear map
  })

  observeEvent(input$selectsrc, {           # change source -> resets map
    if (setnewsource(input$selectsrc)) {
      updateSelectInput(session, "selectfrcst",
                        choices = cfg$frcstchoices,
                        selected = character(0) )  
      clearselections(2)  # clear scn,years,vars
      refreshmap()  # clear map
    }
  })

  observeEvent(input$selectfrcst, {         # change frcsrt -> add taz 2 map
    waiter <- waiter::Waiter$new( html = spin_3(), color = transparent(.5)) 
    waiter$show()
    on.exit(waiter$hide())    
    if (setnewfrcst(input$selectfrcst)) {
      
      updateSelectInput(session, "selectscn", choices = currentfrcst$scnchoices, selected = character(0) )
      updatePrettyCheckboxGroup(session, "selectyr",
                          choices = as.list(currentfrcst$getscnyears()),
                          inline = TRUE,
                          selected = character(0) )

      updateSelectInput(session, "selectSz",
                        choices = currentfrcst$geochoices,
                        selected = currentfrcst$geochoices[1] )
      
      refreshmap()
    }
  })

  output$treevar <- renderUI({
    if (input$selectfrcst!="") {
      if (is.null(currentfrcst)) {
          NULL
      } else {
        treeInput(
          inputId = "selectvar",
          label = "משתנים",
          choices = currentfrcst$varstree, # character(0),
          #selected = "", San Francisco",
          returnValue = "text",
          closeDepth = 0
        ) 
      }
    }
  })

  observeEvent(input$selectscnclr, {   # clear scn choices
    updateSelectInput(session, "selectscn", selected = character(0) )
  })
  observeEvent(input$selectscnall, {   # select all scn 
    updateSelectInput(session, "selectscn", selected = currentfrcst$scnchoices )
  })
  
  observeEvent(input$selectyrclr, {    # clear yr choices
    updatePrettyCheckboxGroup(session, "selectyr", selected = character(0) )
  })
  observeEvent(input$selectyrall, {    # slect all  yr 
    updatePrettyCheckboxGroup(session, "selectyr", selected = as.list(currentfrcst$getscnyears()) )
  })

  observeEvent(input$selectSz, {    # change resolution
    if (input$selectSz!="") {
      if (currentfrcst$aglvl!=input$selectSz) {
        if (input$selectSz!="taz") {
          geodef = cfg$superzones[[input$selectSz]]
        } else { geodef=NULL }
        currentfrcst$setaglvl(input$selectSz, geodef)
        basemap$reset(cfg$basemap)  # reset basemap
        basemap$addfrcst(currentfrcst)
        #clearselections(1)  # clear years,vars
        updatePrettyCheckboxGroup(session, "selectyr", selected = character(0) )  # does not clear nut it will do
        updateTreeInput(inputId = "selectvar", selected = character(0))
        refreshmap()
      }
    }  
  })
  

  observeEvent(input$tabs1, {
    cat(paste0(input$tabs1,"\n"))
    doanalisys()
  })
  
  observeEvent(input$doanalisys, {
    #showmessage("pressed button")
    doanalisys()
  })
  
  refreshmap = function(mapobject=NULL) {
    if (is.null(mapobject)) {
      output$appMap <- renderLeaflet({ basemap$mapview@map })
      output$leaf = renderUI({ leafletOutput("appMap", 
                                             width = "100%", height = cfg$height*0.8) }) 
                                             #width = "100%", height = cfg$basemap$height) }) 
    } else {
      #output$appMap <- renderLeaflet({ mapobject })
      output$leaf = renderUI({ mapobject }) 
      }
  }

  doanalisys = function() {
    req(currentfrcst, input$selectscn, input$selectyr, input$selectvar)

    userreq = list()
    userreq$frcst = currentfrcst
    userreq$scn = input$selectscn
    userreq$yr = input$selectyr

    #userreq$var = input$selectvar
    tmp = unique(input$selectvar[input$selectvar %in% userreq$frcst$dispvarsdesc])   # get rid of groups (treeinput)
    tmp = unlist(lapply(tmp, function(x) currentfrcst$dispvars[which(x==userreq$frcst$dispvarsdesc)])) # (treeinput)
    userreq$dict = list()
    for (i in 1:length(tmp)) {
      x = userreq$frcst$data$dict[tmp[i]]
      if (!is.null(x[[1]])) { userreq$dict = append(userreq$dict, x) }
      else { userreq$dict = append(userreq$dict, userreq$frcst$data$geodict[tmp[i]]) }
    }
    userreq$var = names(userreq$dict)

    # check if all required scenarios apply to requested years
    yearsok = 1
    for (i in 1:length(userreq$scn)) {
      scnyrs = userreq$frcst$data$scenarios[[userreq$scn]]$years
      if (!all(userreq$yr %in% scnyrs)) {yearsok=NULL}
    }
    if (is.null(yearsok)) { 
      sendSweetAlert(session = session,title = "Error...",
        text = "חלק מהתרחישים לא קיימים בשנים המבוקשות", type = "error" )
    }
    req(yearsok)
    
    if ((length(userreq$yr)==1)&&(length(userreq$scn)==1)&&(length(userreq$var)==1)) {
      userreq$mode = "1"
    } else if ((length(userreq$yr)==2)&&(length(userreq$scn)==1)&&(length(userreq$var)==1)) {
      userreq$mode = "2Y"
    } else if ((length(userreq$yr)==1)&&(length(userreq$scn)==2)&&(length(userreq$var)==1)) {
      userreq$mode = "2S"
    } else if ((length(userreq$yr)==1)&&(length(userreq$scn)==1)&&(length(userreq$var)==2)) {
      userreq$mode = "2V"
    } else {
      userreq$mode = "3"
    }  

    if (input$tabs1=='map') {
      result = createMap(userreq)
      if (class(result)[[1]]=="mapview") {
        frcstnewmap(userreq$frcst)
        basemap$add(result)
        refreshmap()
      } else { refreshmap(result) }
    } else if (input$tabs1=='Summary') {
      frcstsummary = createSummaryTable(userreq)  
      #output$Frcstsummary <- renderPrint({ frcstsummary })
      output$Frcstsummary <- renderUI({ frcstsummary })
      
    } else if (input$tabs1=='chart') {
      frcstchart = createChronologicalGraph(userreq)  
      #output$FrcstChart <- renderPlot({ frcstchart })
      output$FrcstChart <- renderUI({ frcstchart })
      
    } else if (input$tabs1=='Table') {
      atable = subtable(userreq)
      output$Frcsttable <-  renderDataTable(atable)
      #output$Frcsttable <-  renderDataTable(currentfrcst$tazdata)
    }

  }

  # -------------------------------------
  
  # other settings  
  

}  # end server

# Run the application 
shinyApp(ui = ui, server = server)


# = end ==============================================

# selectizeInput(
#   'selectSz', 'רמת תצוגה', choices = cfg$szchoices,
#   options = list(
#     placeholder = 'בחר מתוך הרשימה ...',
#     onInitialize = I('function() { this.setValue(""); }')
#   ) ),


# radioButtons("zonetype", NULL,
#              choiceNames = list("גבולות מקור", "אזורי על"),
#              choiceValues = list(1, 2),
#              inline = TRUE ),


# shiny status colors: 'info', 'primary', 'danger', 'warning' or 'success'
# secondary, primary, success, danger, warning, info, light, dark

#  observeEvent(input$selectscn, {
#    if (input$selectscn!="") {
#      if (setnewscn(input$selectscn)) {
#        updatePrettyCheckboxGroup(session, "selectyr",  # updateSelectInput
#                        choices = as.list(currentfrcst$getscnyears(currentscn)),
#                        inline = TRUE, selected = character(0) )
#      }
#    }
#  })


# server tests

#htmlOutput("selectedFrcst"),        # display selection  
#br()

#    output$selectedFrcst = renderPrint({
#    #str0 = paste("set scenario:", currentfrcst$name, sep = " ")
#    str1 = paste("scenario:", input$selectfrcst, sep = " ")
#    str2 = paste("super zone:", input$selectSz, sep = " ")
#    HTML(paste(str0, str1, str2, sep = '<br/>'))
#  })

# --------------------------------------

#output$appMap <- renderLeaflet({ 
#  basemap$mapview@map })

## prepare map
#output$leaf = renderUI({
#  leafletOutput("appMap", width = "100%", height = cfg$basemap$height) })

# Generate a summary of the data ----
#output$Frcstsummary <- renderPrint({
#  Frcstsummary })

## Generate an HTML table view of the data ----
#output$Frcsttable <- renderTable({
#  currentfrcst$tazdata })


# ---------------------------------------------------------

# test button 
#observeEvent(input$testbutton, {
#  test1()
#if (input$selectsrc=="") {
#  showmessage("no scr")
#}
#else {
#  showmessage(input$selectsrc)
#} 
#if (input$selectfrcst=="") {
#  showmessage("no Frcst")
#}
#else {
#  showmessage(input$selectfrcst)
#} 

#showmessage("testbutton")
#test2(basemap$name, session)    
#test3(basemap$name, session)    
#  sss <<- leafletProxy("myMap", session) %>%
#   addMarkers(lng=35.0, lat=31.4, popup="<b>Hello</b>")      

#})  

#observeEvent(input$testbutton2, {
#  showmessage("testbutton2")
#  amap = leafletProxy(basemap$name, session)
#  #addlyrtoLLmap(amap, "metrorings2008")
#})  
